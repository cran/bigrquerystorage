// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/storage/v1/storage.proto

#include "google/cloud/bigquery/storage/v1/storage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppendRowsRequest_ProtoData_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppendRowsResponse_AppendResult_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2farrow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrowRecordBatch_google_2fcloud_2fbigquery_2fstorage_2fv1_2farrow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2farrow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrowSchema_google_2fcloud_2fbigquery_2fstorage_2fv1_2farrow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvroRows_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvroSchema_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoRows_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtoSchema_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ReadSession_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadStream_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RowError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StorageError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2ftable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TableSchema_google_2fcloud_2fbigquery_2fstorage_2fv1_2ftable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WriteStream_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_google_2frpc_2fstatus_2eproto;
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {
class CreateReadSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateReadSessionRequest> _instance;
} _CreateReadSessionRequest_default_instance_;
class ReadRowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRowsRequest> _instance;
} _ReadRowsRequest_default_instance_;
class ThrottleStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThrottleState> _instance;
} _ThrottleState_default_instance_;
class StreamStats_ProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamStats_Progress> _instance;
} _StreamStats_Progress_default_instance_;
class StreamStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamStats> _instance;
} _StreamStats_default_instance_;
class ReadRowsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRowsResponse> _instance;
  const ::google::cloud::bigquery::storage::v1::AvroRows* avro_rows_;
  const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch_;
  const ::google::cloud::bigquery::storage::v1::AvroSchema* avro_schema_;
  const ::google::cloud::bigquery::storage::v1::ArrowSchema* arrow_schema_;
} _ReadRowsResponse_default_instance_;
class SplitReadStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitReadStreamRequest> _instance;
} _SplitReadStreamRequest_default_instance_;
class SplitReadStreamResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitReadStreamResponse> _instance;
} _SplitReadStreamResponse_default_instance_;
class CreateWriteStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateWriteStreamRequest> _instance;
} _CreateWriteStreamRequest_default_instance_;
class AppendRowsRequest_ProtoDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendRowsRequest_ProtoData> _instance;
} _AppendRowsRequest_ProtoData_default_instance_;
class AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse> _instance;
} _AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse_default_instance_;
class AppendRowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendRowsRequest> _instance;
  const ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* proto_rows_;
} _AppendRowsRequest_default_instance_;
class AppendRowsResponse_AppendResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendRowsResponse_AppendResult> _instance;
} _AppendRowsResponse_AppendResult_default_instance_;
class AppendRowsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendRowsResponse> _instance;
  const ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* append_result_;
  const ::google::rpc::Status* error_;
} _AppendRowsResponse_default_instance_;
class GetWriteStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWriteStreamRequest> _instance;
} _GetWriteStreamRequest_default_instance_;
class BatchCommitWriteStreamsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchCommitWriteStreamsRequest> _instance;
} _BatchCommitWriteStreamsRequest_default_instance_;
class BatchCommitWriteStreamsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchCommitWriteStreamsResponse> _instance;
} _BatchCommitWriteStreamsResponse_default_instance_;
class FinalizeWriteStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinalizeWriteStreamRequest> _instance;
} _FinalizeWriteStreamRequest_default_instance_;
class FinalizeWriteStreamResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinalizeWriteStreamResponse> _instance;
} _FinalizeWriteStreamResponse_default_instance_;
class FlushRowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushRowsRequest> _instance;
} _FlushRowsRequest_default_instance_;
class FlushRowsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushRowsResponse> _instance;
} _FlushRowsResponse_default_instance_;
class StorageErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageError> _instance;
} _StorageError_default_instance_;
class RowErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RowError> _instance;
} _RowError_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
static void InitDefaultsscc_info_AppendRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_AppendRowsRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::AppendRowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::AppendRowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppendRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AppendRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_AppendRowsRequest_ProtoData_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
      &scc_info_AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,}};

static void InitDefaultsscc_info_AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse();
  }
  ::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_AppendRowsRequest_ProtoData_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_AppendRowsRequest_ProtoData_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppendRowsRequest_ProtoData_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AppendRowsRequest_ProtoData_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_ProtoSchema_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto.base,
      &scc_info_ProtoRows_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto.base,}};

static void InitDefaultsscc_info_AppendRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_AppendRowsResponse_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::AppendRowsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::AppendRowsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AppendRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AppendRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_AppendRowsResponse_AppendResult_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,
      &scc_info_TableSchema_google_2fcloud_2fbigquery_2fstorage_2fv1_2ftable_2eproto.base,
      &scc_info_RowError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,}};

static void InitDefaultsscc_info_AppendRowsResponse_AppendResult_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_AppendRowsResponse_AppendResult_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppendRowsResponse_AppendResult_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AppendRowsResponse_AppendResult_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_BatchCommitWriteStreamsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_BatchCommitWriteStreamsRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchCommitWriteStreamsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BatchCommitWriteStreamsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_BatchCommitWriteStreamsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_BatchCommitWriteStreamsResponse_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatchCommitWriteStreamsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BatchCommitWriteStreamsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_StorageError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,}};

static void InitDefaultsscc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_CreateReadSessionRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_ReadSession_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto.base,}};

static void InitDefaultsscc_info_CreateWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_CreateWriteStreamRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::CreateWriteStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::CreateWriteStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_WriteStream_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto.base,}};

static void InitDefaultsscc_info_FinalizeWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_FinalizeWriteStreamRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinalizeWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FinalizeWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_FinalizeWriteStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_FinalizeWriteStreamResponse_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinalizeWriteStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FinalizeWriteStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_FlushRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_FlushRowsRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::FlushRowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::FlushRowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlushRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_FlushRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_FlushRowsResponse_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::FlushRowsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::FlushRowsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlushRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_GetWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_GetWriteStreamRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::GetWriteStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::GetWriteStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_ReadRowsRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::ReadRowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::ReadRowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::ReadRowsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::ReadRowsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_AvroRows_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto.base,
      &scc_info_ArrowRecordBatch_google_2fcloud_2fbigquery_2fstorage_2fv1_2farrow_2eproto.base,
      &scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
      &scc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
      &scc_info_AvroSchema_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto.base,
      &scc_info_ArrowSchema_google_2fcloud_2fbigquery_2fstorage_2fv1_2farrow_2eproto.base,}};

static void InitDefaultsscc_info_RowError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_RowError_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::RowError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::RowError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RowError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RowError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_SplitReadStreamRequest_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_SplitReadStreamResponse_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_ReadStream_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto.base,}};

static void InitDefaultsscc_info_StorageError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_StorageError_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::StorageError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::StorageError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StorageError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StorageError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_StreamStats_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::StreamStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::StreamStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {
      &scc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,}};

static void InitDefaultsscc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_StreamStats_Progress_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::StreamStats_Progress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::StreamStats_Progress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static void InitDefaultsscc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::storage::v1::_ThrottleState_default_instance_;
    new (ptr) ::google::cloud::bigquery::storage::v1::ThrottleState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::storage::v1::ThrottleState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, read_session_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, max_stream_count_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateReadSessionRequest, preferred_min_stream_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsRequest, read_stream_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsRequest, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ThrottleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ThrottleState, throttle_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StreamStats_Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StreamStats_Progress, at_response_start_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StreamStats_Progress, at_response_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StreamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StreamStats, progress_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::cloud::bigquery::storage::v1::ReadRowsResponseDefaultTypeInternal, avro_rows_),
  offsetof(::google::cloud::bigquery::storage::v1::ReadRowsResponseDefaultTypeInternal, arrow_record_batch_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, row_count_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, stats_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, throttle_state_),
  offsetof(::google::cloud::bigquery::storage::v1::ReadRowsResponseDefaultTypeInternal, avro_schema_),
  offsetof(::google::cloud::bigquery::storage::v1::ReadRowsResponseDefaultTypeInternal, arrow_schema_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, uncompressed_byte_size_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, rows_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::ReadRowsResponse, schema_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamRequest, fraction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamResponse, primary_stream_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::SplitReadStreamResponse, remainder_stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateWriteStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateWriteStreamRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::CreateWriteStreamRequest, write_stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData, writer_schema_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData, rows_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest, write_stream_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest, offset_),
  offsetof(::google::cloud::bigquery::storage::v1::AppendRowsRequestDefaultTypeInternal, proto_rows_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest, trace_id_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest, missing_value_interpretations_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest, default_missing_value_interpretation_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsRequest, rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::cloud::bigquery::storage::v1::AppendRowsResponseDefaultTypeInternal, append_result_),
  offsetof(::google::cloud::bigquery::storage::v1::AppendRowsResponseDefaultTypeInternal, error_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsResponse, updated_schema_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsResponse, row_errors_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsResponse, write_stream_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::AppendRowsResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::GetWriteStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::GetWriteStreamRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::GetWriteStreamRequest, view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsRequest, write_streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsResponse, commit_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsResponse, stream_errors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::FinalizeWriteStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::FinalizeWriteStreamRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::FinalizeWriteStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::FinalizeWriteStreamResponse, row_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::FlushRowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::FlushRowsRequest, write_stream_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::FlushRowsRequest, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::FlushRowsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::FlushRowsResponse, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StorageError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StorageError, code_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StorageError, entity_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::StorageError, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::RowError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::RowError, index_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::RowError, code_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::bigquery::storage::v1::RowError, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::bigquery::storage::v1::CreateReadSessionRequest)},
  { 9, -1, sizeof(::google::cloud::bigquery::storage::v1::ReadRowsRequest)},
  { 16, -1, sizeof(::google::cloud::bigquery::storage::v1::ThrottleState)},
  { 22, -1, sizeof(::google::cloud::bigquery::storage::v1::StreamStats_Progress)},
  { 29, -1, sizeof(::google::cloud::bigquery::storage::v1::StreamStats)},
  { 35, 50, sizeof(::google::cloud::bigquery::storage::v1::ReadRowsResponse)},
  { 58, -1, sizeof(::google::cloud::bigquery::storage::v1::SplitReadStreamRequest)},
  { 65, -1, sizeof(::google::cloud::bigquery::storage::v1::SplitReadStreamResponse)},
  { 72, -1, sizeof(::google::cloud::bigquery::storage::v1::CreateWriteStreamRequest)},
  { 79, -1, sizeof(::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData)},
  { 86, 93, sizeof(::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse)},
  { 95, -1, sizeof(::google::cloud::bigquery::storage::v1::AppendRowsRequest)},
  { 107, -1, sizeof(::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult)},
  { 113, -1, sizeof(::google::cloud::bigquery::storage::v1::AppendRowsResponse)},
  { 124, -1, sizeof(::google::cloud::bigquery::storage::v1::GetWriteStreamRequest)},
  { 131, -1, sizeof(::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsRequest)},
  { 138, -1, sizeof(::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsResponse)},
  { 145, -1, sizeof(::google::cloud::bigquery::storage::v1::FinalizeWriteStreamRequest)},
  { 151, -1, sizeof(::google::cloud::bigquery::storage::v1::FinalizeWriteStreamResponse)},
  { 157, -1, sizeof(::google::cloud::bigquery::storage::v1::FlushRowsRequest)},
  { 164, -1, sizeof(::google::cloud::bigquery::storage::v1::FlushRowsResponse)},
  { 170, -1, sizeof(::google::cloud::bigquery::storage::v1::StorageError)},
  { 178, -1, sizeof(::google::cloud::bigquery::storage::v1::RowError)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_CreateReadSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_ReadRowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_ThrottleState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_StreamStats_Progress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_StreamStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_SplitReadStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_SplitReadStreamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_CreateWriteStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_AppendRowsRequest_ProtoData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_AppendRowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_AppendRowsResponse_AppendResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_AppendRowsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_GetWriteStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_BatchCommitWriteStreamsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_BatchCommitWriteStreamsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_FinalizeWriteStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_FinalizeWriteStreamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_FlushRowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_FlushRowsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_StorageError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::bigquery::storage::v1::_RowError_default_instance_),
};

const char descriptor_table_protodef_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.google/cloud/bigquery/storage/v1/stora"
  "ge.proto\022 google.cloud.bigquery.storage."
  "v1\032\034google/api/annotations.proto\032\027google"
  "/api/client.proto\032\037google/api/field_beha"
  "vior.proto\032\031google/api/resource.proto\032,g"
  "oogle/cloud/bigquery/storage/v1/arrow.pr"
  "oto\032+google/cloud/bigquery/storage/v1/av"
  "ro.proto\032/google/cloud/bigquery/storage/"
  "v1/protobuf.proto\032-google/cloud/bigquery"
  "/storage/v1/stream.proto\032,google/cloud/b"
  "igquery/storage/v1/table.proto\032\037google/p"
  "rotobuf/timestamp.proto\032\036google/protobuf"
  "/wrappers.proto\032\027google/rpc/status.proto"
  "\"\347\001\n\030CreateReadSessionRequest\022C\n\006parent\030"
  "\001 \001(\tB3\340A\002\372A-\n+cloudresourcemanager.goog"
  "leapis.com/Project\022H\n\014read_session\030\002 \001(\013"
  "2-.google.cloud.bigquery.storage.v1.Read"
  "SessionB\003\340A\002\022\030\n\020max_stream_count\030\003 \001(\005\022\""
  "\n\032preferred_min_stream_count\030\004 \001(\005\"i\n\017Re"
  "adRowsRequest\022F\n\013read_stream\030\001 \001(\tB1\340A\002\372"
  "A+\n)bigquerystorage.googleapis.com/ReadS"
  "tream\022\016\n\006offset\030\002 \001(\003\")\n\rThrottleState\022\030"
  "\n\020throttle_percent\030\001 \001(\005\"\227\001\n\013StreamStats"
  "\022H\n\010progress\030\002 \001(\01326.google.cloud.bigque"
  "ry.storage.v1.StreamStats.Progress\032>\n\010Pr"
  "ogress\022\031\n\021at_response_start\030\001 \001(\001\022\027\n\017at_"
  "response_end\030\002 \001(\001\"\254\004\n\020ReadRowsResponse\022"
  "\?\n\tavro_rows\030\003 \001(\0132*.google.cloud.bigque"
  "ry.storage.v1.AvroRowsH\000\022P\n\022arrow_record"
  "_batch\030\004 \001(\01322.google.cloud.bigquery.sto"
  "rage.v1.ArrowRecordBatchH\000\022\021\n\trow_count\030"
  "\006 \001(\003\022<\n\005stats\030\002 \001(\0132-.google.cloud.bigq"
  "uery.storage.v1.StreamStats\022G\n\016throttle_"
  "state\030\005 \001(\0132/.google.cloud.bigquery.stor"
  "age.v1.ThrottleState\022H\n\013avro_schema\030\007 \001("
  "\0132,.google.cloud.bigquery.storage.v1.Avr"
  "oSchemaB\003\340A\003H\001\022J\n\014arrow_schema\030\010 \001(\0132-.g"
  "oogle.cloud.bigquery.storage.v1.ArrowSch"
  "emaB\003\340A\003H\001\022(\n\026uncompressed_byte_size\030\t \001"
  "(\003B\003\340A\001H\002\210\001\001B\006\n\004rowsB\010\n\006schemaB\031\n\027_uncom"
  "pressed_byte_size\"k\n\026SplitReadStreamRequ"
  "est\022\?\n\004name\030\001 \001(\tB1\340A\002\372A+\n)bigquerystora"
  "ge.googleapis.com/ReadStream\022\020\n\010fraction"
  "\030\002 \001(\001\"\247\001\n\027SplitReadStreamResponse\022D\n\016pr"
  "imary_stream\030\001 \001(\0132,.google.cloud.bigque"
  "ry.storage.v1.ReadStream\022F\n\020remainder_st"
  "ream\030\002 \001(\0132,.google.cloud.bigquery.stora"
  "ge.v1.ReadStream\"\233\001\n\030CreateWriteStreamRe"
  "quest\0225\n\006parent\030\001 \001(\tB%\340A\002\372A\037\n\035bigquery."
  "googleapis.com/Table\022H\n\014write_stream\030\002 \001"
  "(\0132-.google.cloud.bigquery.storage.v1.Wr"
  "iteStreamB\003\340A\002\"\215\007\n\021AppendRowsRequest\022H\n\014"
  "write_stream\030\001 \001(\tB2\340A\002\372A,\n*bigquerystor"
  "age.googleapis.com/WriteStream\022+\n\006offset"
  "\030\002 \001(\0132\033.google.protobuf.Int64Value\022S\n\np"
  "roto_rows\030\004 \001(\0132=.google.cloud.bigquery."
  "storage.v1.AppendRowsRequest.ProtoDataH\000"
  "\022\020\n\010trace_id\030\006 \001(\t\022{\n\035missing_value_inte"
  "rpretations\030\007 \003(\0132T.google.cloud.bigquer"
  "y.storage.v1.AppendRowsRequest.MissingVa"
  "lueInterpretationsEntry\022\201\001\n$default_miss"
  "ing_value_interpretation\030\010 \001(\0162N.google."
  "cloud.bigquery.storage.v1.AppendRowsRequ"
  "est.MissingValueInterpretationB\003\340A\001\032\214\001\n\t"
  "ProtoData\022D\n\rwriter_schema\030\001 \001(\0132-.googl"
  "e.cloud.bigquery.storage.v1.ProtoSchema\022"
  "9\n\004rows\030\002 \001(\0132+.google.cloud.bigquery.st"
  "orage.v1.ProtoRows\032\222\001\n MissingValueInter"
  "pretationsEntry\022\013\n\003key\030\001 \001(\t\022]\n\005value\030\002 "
  "\001(\0162N.google.cloud.bigquery.storage.v1.A"
  "ppendRowsRequest.MissingValueInterpretat"
  "ion:\0028\001\"m\n\032MissingValueInterpretation\022,\n"
  "(MISSING_VALUE_INTERPRETATION_UNSPECIFIE"
  "D\020\000\022\016\n\nNULL_VALUE\020\001\022\021\n\rDEFAULT_VALUE\020\002B\006"
  "\n\004rows\"\373\002\n\022AppendRowsResponse\022Z\n\rappend_"
  "result\030\001 \001(\0132A.google.cloud.bigquery.sto"
  "rage.v1.AppendRowsResponse.AppendResultH"
  "\000\022#\n\005error\030\002 \001(\0132\022.google.rpc.StatusH\000\022E"
  "\n\016updated_schema\030\003 \001(\0132-.google.cloud.bi"
  "gquery.storage.v1.TableSchema\022>\n\nrow_err"
  "ors\030\004 \003(\0132*.google.cloud.bigquery.storag"
  "e.v1.RowError\022\024\n\014write_stream\030\005 \001(\t\032;\n\014A"
  "ppendResult\022+\n\006offset\030\001 \001(\0132\033.google.pro"
  "tobuf.Int64ValueB\n\n\010response\"\232\001\n\025GetWrit"
  "eStreamRequest\022@\n\004name\030\001 \001(\tB2\340A\002\372A,\n*bi"
  "gquerystorage.googleapis.com/WriteStream"
  "\022\?\n\004view\030\003 \001(\01621.google.cloud.bigquery.s"
  "torage.v1.WriteStreamView\"s\n\036BatchCommit"
  "WriteStreamsRequest\0225\n\006parent\030\001 \001(\tB%\340A\002"
  "\372A\037\n\035bigquery.googleapis.com/Table\022\032\n\rwr"
  "ite_streams\030\002 \003(\tB\003\340A\002\"\231\001\n\037BatchCommitWr"
  "iteStreamsResponse\022/\n\013commit_time\030\001 \001(\0132"
  "\032.google.protobuf.Timestamp\022E\n\rstream_er"
  "rors\030\002 \003(\0132..google.cloud.bigquery.stora"
  "ge.v1.StorageError\"^\n\032FinalizeWriteStrea"
  "mRequest\022@\n\004name\030\001 \001(\tB2\340A\002\372A,\n*bigquery"
  "storage.googleapis.com/WriteStream\"0\n\033Fi"
  "nalizeWriteStreamResponse\022\021\n\trow_count\030\001"
  " \001(\003\"\211\001\n\020FlushRowsRequest\022H\n\014write_strea"
  "m\030\001 \001(\tB2\340A\002\372A,\n*bigquerystorage.googlea"
  "pis.com/WriteStream\022+\n\006offset\030\002 \001(\0132\033.go"
  "ogle.protobuf.Int64Value\"#\n\021FlushRowsRes"
  "ponse\022\016\n\006offset\030\001 \001(\003\"\244\004\n\014StorageError\022M"
  "\n\004code\030\001 \001(\0162\?.google.cloud.bigquery.sto"
  "rage.v1.StorageError.StorageErrorCode\022\016\n"
  "\006entity\030\002 \001(\t\022\025\n\rerror_message\030\003 \001(\t\"\235\003\n"
  "\020StorageErrorCode\022\"\n\036STORAGE_ERROR_CODE_"
  "UNSPECIFIED\020\000\022\023\n\017TABLE_NOT_FOUND\020\001\022\034\n\030ST"
  "REAM_ALREADY_COMMITTED\020\002\022\024\n\020STREAM_NOT_F"
  "OUND\020\003\022\027\n\023INVALID_STREAM_TYPE\020\004\022\030\n\024INVAL"
  "ID_STREAM_STATE\020\005\022\024\n\020STREAM_FINALIZED\020\006\022"
  " \n\034SCHEMA_MISMATCH_EXTRA_FIELDS\020\007\022\031\n\025OFF"
  "SET_ALREADY_EXISTS\020\010\022\027\n\023OFFSET_OUT_OF_RA"
  "NGE\020\t\022\025\n\021CMEK_NOT_PROVIDED\020\n\022\031\n\025INVALID_"
  "CMEK_PROVIDED\020\013\022\031\n\025CMEK_ENCRYPTION_ERROR"
  "\020\014\022\025\n\021KMS_SERVICE_ERROR\020\r\022\031\n\025KMS_PERMISS"
  "ION_DENIED\020\016\"\263\001\n\010RowError\022\r\n\005index\030\001 \001(\003"
  "\022E\n\004code\030\002 \001(\01627.google.cloud.bigquery.s"
  "torage.v1.RowError.RowErrorCode\022\017\n\007messa"
  "ge\030\003 \001(\t\"@\n\014RowErrorCode\022\036\n\032ROW_ERROR_CO"
  "DE_UNSPECIFIED\020\000\022\020\n\014FIELDS_ERROR\020\0012\222\006\n\014B"
  "igQueryRead\022\351\001\n\021CreateReadSession\022:.goog"
  "le.cloud.bigquery.storage.v1.CreateReadS"
  "essionRequest\032-.google.cloud.bigquery.st"
  "orage.v1.ReadSession\"i\202\323\344\223\002<\"7/v1/{read_"
  "session.table=projects/*/datasets/*/tabl"
  "es/*}:\001*\332A$parent,read_session,max_strea"
  "m_count\022\317\001\n\010ReadRows\0221.google.cloud.bigq"
  "uery.storage.v1.ReadRowsRequest\0322.google"
  ".cloud.bigquery.storage.v1.ReadRowsRespo"
  "nse\"Z\202\323\344\223\002\?\022=/v1/{read_stream=projects/*"
  "/locations/*/sessions/*/streams/*}\332A\022rea"
  "d_stream,offset0\001\022\306\001\n\017SplitReadStream\0228."
  "google.cloud.bigquery.storage.v1.SplitRe"
  "adStreamRequest\0329.google.cloud.bigquery."
  "storage.v1.SplitReadStreamResponse\">\202\323\344\223"
  "\0028\0226/v1/{name=projects/*/locations/*/ses"
  "sions/*/streams/*}\032{\312A\036bigquerystorage.g"
  "oogleapis.com\322AWhttps://www.googleapis.c"
  "om/auth/bigquery,https://www.googleapis."
  "com/auth/cloud-platform2\274\013\n\rBigQueryWrit"
  "e\022\327\001\n\021CreateWriteStream\022:.google.cloud.b"
  "igquery.storage.v1.CreateWriteStreamRequ"
  "est\032-.google.cloud.bigquery.storage.v1.W"
  "riteStream\"W\202\323\344\223\002;\"+/v1/{parent=projects"
  "/*/datasets/*/tables/*}:\014write_stream\332A\023"
  "parent,write_stream\022\322\001\n\nAppendRows\0223.goo"
  "gle.cloud.bigquery.storage.v1.AppendRows"
  "Request\0324.google.cloud.bigquery.storage."
  "v1.AppendRowsResponse\"U\202\323\344\223\002@\";/v1/{writ"
  "e_stream=projects/*/datasets/*/tables/*/"
  "streams/*}:\001*\332A\014write_stream(\0010\001\022\277\001\n\016Get"
  "WriteStream\0227.google.cloud.bigquery.stor"
  "age.v1.GetWriteStreamRequest\032-.google.cl"
  "oud.bigquery.storage.v1.WriteStream\"E\202\323\344"
  "\223\0028\"3/v1/{name=projects/*/datasets/*/tab"
  "les/*/streams/*}:\001*\332A\004name\022\331\001\n\023FinalizeW"
  "riteStream\022<.google.cloud.bigquery.stora"
  "ge.v1.FinalizeWriteStreamRequest\032=.googl"
  "e.cloud.bigquery.storage.v1.FinalizeWrit"
  "eStreamResponse\"E\202\323\344\223\0028\"3/v1/{name=proje"
  "cts/*/datasets/*/tables/*/streams/*}:\001*\332"
  "A\004name\022\334\001\n\027BatchCommitWriteStreams\022@.goo"
  "gle.cloud.bigquery.storage.v1.BatchCommi"
  "tWriteStreamsRequest\032A.google.cloud.bigq"
  "uery.storage.v1.BatchCommitWriteStreamsR"
  "esponse\"<\202\323\344\223\002-\022+/v1/{parent=projects/*/"
  "datasets/*/tables/*}\332A\006parent\022\313\001\n\tFlushR"
  "ows\0222.google.cloud.bigquery.storage.v1.F"
  "lushRowsRequest\0323.google.cloud.bigquery."
  "storage.v1.FlushRowsResponse\"U\202\323\344\223\002@\";/v"
  "1/{write_stream=projects/*/datasets/*/ta"
  "bles/*/streams/*}:\001*\332A\014write_stream\032\260\001\312A"
  "\036bigquerystorage.googleapis.com\322A\213\001https"
  "://www.googleapis.com/auth/bigquery,http"
  "s://www.googleapis.com/auth/bigquery.ins"
  "ertdata,https://www.googleapis.com/auth/"
  "cloud-platformB\224\002\n$com.google.cloud.bigq"
  "uery.storage.v1B\014StorageProtoP\001Z>cloud.g"
  "oogle.com/go/bigquery/storage/apiv1/stor"
  "agepb;storagepb\252\002 Google.Cloud.BigQuery."
  "Storage.V1\312\002 Google\\Cloud\\BigQuery\\Stora"
  "ge\\V1\352AU\n\035bigquery.googleapis.com/Table\022"
  "4projects/{project}/datasets/{dataset}/t"
  "ables/{table}b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_deps[12] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2farrow_2eproto,
  &::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2favro_2eproto,
  &::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fprotobuf_2eproto,
  &::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstream_2eproto,
  &::descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2ftable_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_sccs[23] = {
  &scc_info_AppendRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_AppendRowsRequest_ProtoData_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_AppendRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_AppendRowsResponse_AppendResult_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_BatchCommitWriteStreamsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_BatchCommitWriteStreamsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_CreateWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_FinalizeWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_FinalizeWriteStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_FlushRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_FlushRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_GetWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_RowError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_StorageError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
  &scc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto = {
  false, false, descriptor_table_protodef_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto, "google/cloud/bigquery/storage/v1/storage.proto", 7381,
  &descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_once, descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_sccs, descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto_deps, 23, 12,
  schemas, file_default_instances, TableStruct_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto::offsets,
  file_level_metadata_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto, 23, file_level_enum_descriptors_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto, file_level_service_descriptors_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto)), true);
namespace google {
namespace cloud {
namespace bigquery {
namespace storage {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppendRowsRequest_MissingValueInterpretation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto);
  return file_level_enum_descriptors_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto[0];
}
bool AppendRowsRequest_MissingValueInterpretation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AppendRowsRequest_MissingValueInterpretation AppendRowsRequest::MISSING_VALUE_INTERPRETATION_UNSPECIFIED;
constexpr AppendRowsRequest_MissingValueInterpretation AppendRowsRequest::NULL_VALUE;
constexpr AppendRowsRequest_MissingValueInterpretation AppendRowsRequest::DEFAULT_VALUE;
constexpr AppendRowsRequest_MissingValueInterpretation AppendRowsRequest::MissingValueInterpretation_MIN;
constexpr AppendRowsRequest_MissingValueInterpretation AppendRowsRequest::MissingValueInterpretation_MAX;
constexpr int AppendRowsRequest::MissingValueInterpretation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StorageError_StorageErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto);
  return file_level_enum_descriptors_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto[1];
}
bool StorageError_StorageErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StorageError_StorageErrorCode StorageError::STORAGE_ERROR_CODE_UNSPECIFIED;
constexpr StorageError_StorageErrorCode StorageError::TABLE_NOT_FOUND;
constexpr StorageError_StorageErrorCode StorageError::STREAM_ALREADY_COMMITTED;
constexpr StorageError_StorageErrorCode StorageError::STREAM_NOT_FOUND;
constexpr StorageError_StorageErrorCode StorageError::INVALID_STREAM_TYPE;
constexpr StorageError_StorageErrorCode StorageError::INVALID_STREAM_STATE;
constexpr StorageError_StorageErrorCode StorageError::STREAM_FINALIZED;
constexpr StorageError_StorageErrorCode StorageError::SCHEMA_MISMATCH_EXTRA_FIELDS;
constexpr StorageError_StorageErrorCode StorageError::OFFSET_ALREADY_EXISTS;
constexpr StorageError_StorageErrorCode StorageError::OFFSET_OUT_OF_RANGE;
constexpr StorageError_StorageErrorCode StorageError::CMEK_NOT_PROVIDED;
constexpr StorageError_StorageErrorCode StorageError::INVALID_CMEK_PROVIDED;
constexpr StorageError_StorageErrorCode StorageError::CMEK_ENCRYPTION_ERROR;
constexpr StorageError_StorageErrorCode StorageError::KMS_SERVICE_ERROR;
constexpr StorageError_StorageErrorCode StorageError::KMS_PERMISSION_DENIED;
constexpr StorageError_StorageErrorCode StorageError::StorageErrorCode_MIN;
constexpr StorageError_StorageErrorCode StorageError::StorageErrorCode_MAX;
constexpr int StorageError::StorageErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RowError_RowErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto);
  return file_level_enum_descriptors_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto[2];
}
bool RowError_RowErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RowError_RowErrorCode RowError::ROW_ERROR_CODE_UNSPECIFIED;
constexpr RowError_RowErrorCode RowError::FIELDS_ERROR;
constexpr RowError_RowErrorCode RowError::RowErrorCode_MIN;
constexpr RowError_RowErrorCode RowError::RowErrorCode_MAX;
constexpr int RowError::RowErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CreateReadSessionRequest::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_CreateReadSessionRequest_default_instance_._instance.get_mutable()->read_session_ = const_cast< ::google::cloud::bigquery::storage::v1::ReadSession*>(
      ::google::cloud::bigquery::storage::v1::ReadSession::internal_default_instance());
}
class CreateReadSessionRequest::_Internal {
 public:
  static const ::google::cloud::bigquery::storage::v1::ReadSession& read_session(const CreateReadSessionRequest* msg);
};

const ::google::cloud::bigquery::storage::v1::ReadSession&
CreateReadSessionRequest::_Internal::read_session(const CreateReadSessionRequest* msg) {
  return *msg->read_session_;
}
void CreateReadSessionRequest::clear_read_session() {
  if (GetArena() == nullptr && read_session_ != nullptr) {
    delete read_session_;
  }
  read_session_ = nullptr;
}
CreateReadSessionRequest::CreateReadSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
}
CreateReadSessionRequest::CreateReadSessionRequest(const CreateReadSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent().empty()) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parent(),
      GetArena());
  }
  if (from._internal_has_read_session()) {
    read_session_ = new ::google::cloud::bigquery::storage::v1::ReadSession(*from.read_session_);
  } else {
    read_session_ = nullptr;
  }
  ::memcpy(&max_stream_count_, &from.max_stream_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&preferred_min_stream_count_) -
    reinterpret_cast<char*>(&max_stream_count_)) + sizeof(preferred_min_stream_count_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
}

void CreateReadSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&read_session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preferred_min_stream_count_) -
      reinterpret_cast<char*>(&read_session_)) + sizeof(preferred_min_stream_count_));
}

CreateReadSessionRequest::~CreateReadSessionRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateReadSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete read_session_;
}

void CreateReadSessionRequest::ArenaDtor(void* object) {
  CreateReadSessionRequest* _this = reinterpret_cast< CreateReadSessionRequest* >(object);
  (void)_this;
}
void CreateReadSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReadSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateReadSessionRequest& CreateReadSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateReadSessionRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CreateReadSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && read_session_ != nullptr) {
    delete read_session_;
  }
  read_session_ = nullptr;
  ::memset(&max_stream_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preferred_min_stream_count_) -
      reinterpret_cast<char*>(&max_stream_count_)) + sizeof(preferred_min_stream_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReadSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.ReadSession read_session = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_stream_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_stream_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 preferred_min_stream_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          preferred_min_stream_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReadSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.CreateReadSessionRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // .google.cloud.bigquery.storage.v1.ReadSession read_session = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_read_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::read_session(this), target, stream);
  }

  // int32 max_stream_count = 3;
  if (this->max_stream_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_stream_count(), target);
  }

  // int32 preferred_min_stream_count = 4;
  if (this->preferred_min_stream_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_preferred_min_stream_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  return target;
}

size_t CreateReadSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // .google.cloud.bigquery.storage.v1.ReadSession read_session = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_read_session()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_session_);
  }

  // int32 max_stream_count = 3;
  if (this->max_stream_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_stream_count());
  }

  // int32 preferred_min_stream_count = 4;
  if (this->preferred_min_stream_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preferred_min_stream_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateReadSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateReadSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateReadSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
    MergeFrom(*source);
  }
}

void CreateReadSessionRequest::MergeFrom(const CreateReadSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    _internal_set_parent(from._internal_parent());
  }
  if (from.has_read_session()) {
    _internal_mutable_read_session()->::google::cloud::bigquery::storage::v1::ReadSession::MergeFrom(from._internal_read_session());
  }
  if (from.max_stream_count() != 0) {
    _internal_set_max_stream_count(from._internal_max_stream_count());
  }
  if (from.preferred_min_stream_count() != 0) {
    _internal_set_preferred_min_stream_count(from._internal_preferred_min_stream_count());
  }
}

void CreateReadSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReadSessionRequest::CopyFrom(const CreateReadSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.CreateReadSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReadSessionRequest::IsInitialized() const {
  return true;
}

void CreateReadSessionRequest::InternalSwap(CreateReadSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateReadSessionRequest, preferred_min_stream_count_)
      + sizeof(CreateReadSessionRequest::preferred_min_stream_count_)
      - PROTOBUF_FIELD_OFFSET(CreateReadSessionRequest, read_session_)>(
          reinterpret_cast<char*>(&read_session_),
          reinterpret_cast<char*>(&other->read_session_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReadSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRowsRequest::InitAsDefaultInstance() {
}
class ReadRowsRequest::_Internal {
 public:
};

ReadRowsRequest::ReadRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.ReadRowsRequest)
}
ReadRowsRequest::ReadRowsRequest(const ReadRowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  read_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_read_stream().empty()) {
    read_stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_read_stream(),
      GetArena());
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.ReadRowsRequest)
}

void ReadRowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  read_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_ = PROTOBUF_LONGLONG(0);
}

ReadRowsRequest::~ReadRowsRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  read_stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadRowsRequest::ArenaDtor(void* object) {
  ReadRowsRequest* _this = reinterpret_cast< ReadRowsRequest* >(object);
  (void)_this;
}
void ReadRowsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRowsRequest& ReadRowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void ReadRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_stream_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string read_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_read_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->read_stream().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_read_stream().data(), static_cast<int>(this->_internal_read_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.ReadRowsRequest.read_stream");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_read_stream(), target);
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  return target;
}

size_t ReadRowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string read_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->read_stream().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_read_stream());
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.ReadRowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.ReadRowsRequest)
    MergeFrom(*source);
  }
}

void ReadRowsRequest::MergeFrom(const ReadRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.read_stream().size() > 0) {
    _internal_set_read_stream(from._internal_read_stream());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void ReadRowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsRequest::CopyFrom(const ReadRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.ReadRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRowsRequest::IsInitialized() const {
  return true;
}

void ReadRowsRequest::InternalSwap(ReadRowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  read_stream_.Swap(&other->read_stream_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThrottleState::InitAsDefaultInstance() {
}
class ThrottleState::_Internal {
 public:
};

ThrottleState::ThrottleState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.ThrottleState)
}
ThrottleState::ThrottleState(const ThrottleState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  throttle_percent_ = from.throttle_percent_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.ThrottleState)
}

void ThrottleState::SharedCtor() {
  throttle_percent_ = 0;
}

ThrottleState::~ThrottleState() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.ThrottleState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThrottleState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThrottleState::ArenaDtor(void* object) {
  ThrottleState* _this = reinterpret_cast< ThrottleState* >(object);
  (void)_this;
}
void ThrottleState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThrottleState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThrottleState& ThrottleState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThrottleState_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void ThrottleState::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.ThrottleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  throttle_percent_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThrottleState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 throttle_percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          throttle_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThrottleState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.ThrottleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 throttle_percent = 1;
  if (this->throttle_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_throttle_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.ThrottleState)
  return target;
}

size_t ThrottleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.ThrottleState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 throttle_percent = 1;
  if (this->throttle_percent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_throttle_percent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThrottleState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.ThrottleState)
  GOOGLE_DCHECK_NE(&from, this);
  const ThrottleState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThrottleState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.ThrottleState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.ThrottleState)
    MergeFrom(*source);
  }
}

void ThrottleState::MergeFrom(const ThrottleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.ThrottleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.throttle_percent() != 0) {
    _internal_set_throttle_percent(from._internal_throttle_percent());
  }
}

void ThrottleState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.ThrottleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThrottleState::CopyFrom(const ThrottleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.ThrottleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThrottleState::IsInitialized() const {
  return true;
}

void ThrottleState::InternalSwap(ThrottleState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(throttle_percent_, other->throttle_percent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThrottleState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamStats_Progress::InitAsDefaultInstance() {
}
class StreamStats_Progress::_Internal {
 public:
};

StreamStats_Progress::StreamStats_Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.StreamStats.Progress)
}
StreamStats_Progress::StreamStats_Progress(const StreamStats_Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&at_response_start_, &from.at_response_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&at_response_end_) -
    reinterpret_cast<char*>(&at_response_start_)) + sizeof(at_response_end_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.StreamStats.Progress)
}

void StreamStats_Progress::SharedCtor() {
  ::memset(&at_response_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&at_response_end_) -
      reinterpret_cast<char*>(&at_response_start_)) + sizeof(at_response_end_));
}

StreamStats_Progress::~StreamStats_Progress() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamStats_Progress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamStats_Progress::ArenaDtor(void* object) {
  StreamStats_Progress* _this = reinterpret_cast< StreamStats_Progress* >(object);
  (void)_this;
}
void StreamStats_Progress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamStats_Progress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamStats_Progress& StreamStats_Progress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamStats_Progress_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void StreamStats_Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&at_response_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&at_response_end_) -
      reinterpret_cast<char*>(&at_response_start_)) + sizeof(at_response_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStats_Progress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double at_response_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          at_response_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double at_response_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          at_response_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamStats_Progress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double at_response_start = 1;
  if (!(this->at_response_start() <= 0 && this->at_response_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_at_response_start(), target);
  }

  // double at_response_end = 2;
  if (!(this->at_response_end() <= 0 && this->at_response_end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_at_response_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  return target;
}

size_t StreamStats_Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double at_response_start = 1;
  if (!(this->at_response_start() <= 0 && this->at_response_start() >= 0)) {
    total_size += 1 + 8;
  }

  // double at_response_end = 2;
  if (!(this->at_response_end() <= 0 && this->at_response_end() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamStats_Progress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStats_Progress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamStats_Progress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.StreamStats.Progress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.StreamStats.Progress)
    MergeFrom(*source);
  }
}

void StreamStats_Progress::MergeFrom(const StreamStats_Progress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.at_response_start() <= 0 && from.at_response_start() >= 0)) {
    _internal_set_at_response_start(from._internal_at_response_start());
  }
  if (!(from.at_response_end() <= 0 && from.at_response_end() >= 0)) {
    _internal_set_at_response_end(from._internal_at_response_end());
  }
}

void StreamStats_Progress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStats_Progress::CopyFrom(const StreamStats_Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.StreamStats.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStats_Progress::IsInitialized() const {
  return true;
}

void StreamStats_Progress::InternalSwap(StreamStats_Progress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamStats_Progress, at_response_end_)
      + sizeof(StreamStats_Progress::at_response_end_)
      - PROTOBUF_FIELD_OFFSET(StreamStats_Progress, at_response_start_)>(
          reinterpret_cast<char*>(&at_response_start_),
          reinterpret_cast<char*>(&other->at_response_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStats_Progress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamStats::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_StreamStats_default_instance_._instance.get_mutable()->progress_ = const_cast< ::google::cloud::bigquery::storage::v1::StreamStats_Progress*>(
      ::google::cloud::bigquery::storage::v1::StreamStats_Progress::internal_default_instance());
}
class StreamStats::_Internal {
 public:
  static const ::google::cloud::bigquery::storage::v1::StreamStats_Progress& progress(const StreamStats* msg);
};

const ::google::cloud::bigquery::storage::v1::StreamStats_Progress&
StreamStats::_Internal::progress(const StreamStats* msg) {
  return *msg->progress_;
}
StreamStats::StreamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.StreamStats)
}
StreamStats::StreamStats(const StreamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_progress()) {
    progress_ = new ::google::cloud::bigquery::storage::v1::StreamStats_Progress(*from.progress_);
  } else {
    progress_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.StreamStats)
}

void StreamStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  progress_ = nullptr;
}

StreamStats::~StreamStats() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.StreamStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete progress_;
}

void StreamStats::ArenaDtor(void* object) {
  StreamStats* _this = reinterpret_cast< StreamStats* >(object);
  (void)_this;
}
void StreamStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamStats& StreamStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamStats_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void StreamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.StreamStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.cloud.bigquery.storage.v1.StreamStats.Progress progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.StreamStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.StreamStats.Progress progress = 2;
  if (this->has_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::progress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.StreamStats)
  return target;
}

size_t StreamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.StreamStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.StreamStats.Progress progress = 2;
  if (this->has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *progress_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.StreamStats)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.StreamStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.StreamStats)
    MergeFrom(*source);
  }
}

void StreamStats::MergeFrom(const StreamStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.StreamStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_progress()) {
    _internal_mutable_progress()->::google::cloud::bigquery::storage::v1::StreamStats_Progress::MergeFrom(from._internal_progress());
  }
}

void StreamStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.StreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStats::CopyFrom(const StreamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.StreamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStats::IsInitialized() const {
  return true;
}

void StreamStats::InternalSwap(StreamStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRowsResponse::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_.avro_rows_ = const_cast< ::google::cloud::bigquery::storage::v1::AvroRows*>(
      ::google::cloud::bigquery::storage::v1::AvroRows::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_.arrow_record_batch_ = const_cast< ::google::cloud::bigquery::storage::v1::ArrowRecordBatch*>(
      ::google::cloud::bigquery::storage::v1::ArrowRecordBatch::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_._instance.get_mutable()->stats_ = const_cast< ::google::cloud::bigquery::storage::v1::StreamStats*>(
      ::google::cloud::bigquery::storage::v1::StreamStats::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_._instance.get_mutable()->throttle_state_ = const_cast< ::google::cloud::bigquery::storage::v1::ThrottleState*>(
      ::google::cloud::bigquery::storage::v1::ThrottleState::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_.avro_schema_ = const_cast< ::google::cloud::bigquery::storage::v1::AvroSchema*>(
      ::google::cloud::bigquery::storage::v1::AvroSchema::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_ReadRowsResponse_default_instance_.arrow_schema_ = const_cast< ::google::cloud::bigquery::storage::v1::ArrowSchema*>(
      ::google::cloud::bigquery::storage::v1::ArrowSchema::internal_default_instance());
}
class ReadRowsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadRowsResponse>()._has_bits_);
  static const ::google::cloud::bigquery::storage::v1::AvroRows& avro_rows(const ReadRowsResponse* msg);
  static const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch& arrow_record_batch(const ReadRowsResponse* msg);
  static const ::google::cloud::bigquery::storage::v1::StreamStats& stats(const ReadRowsResponse* msg);
  static const ::google::cloud::bigquery::storage::v1::ThrottleState& throttle_state(const ReadRowsResponse* msg);
  static const ::google::cloud::bigquery::storage::v1::AvroSchema& avro_schema(const ReadRowsResponse* msg);
  static const ::google::cloud::bigquery::storage::v1::ArrowSchema& arrow_schema(const ReadRowsResponse* msg);
  static void set_has_uncompressed_byte_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::cloud::bigquery::storage::v1::AvroRows&
ReadRowsResponse::_Internal::avro_rows(const ReadRowsResponse* msg) {
  return *msg->rows_.avro_rows_;
}
const ::google::cloud::bigquery::storage::v1::ArrowRecordBatch&
ReadRowsResponse::_Internal::arrow_record_batch(const ReadRowsResponse* msg) {
  return *msg->rows_.arrow_record_batch_;
}
const ::google::cloud::bigquery::storage::v1::StreamStats&
ReadRowsResponse::_Internal::stats(const ReadRowsResponse* msg) {
  return *msg->stats_;
}
const ::google::cloud::bigquery::storage::v1::ThrottleState&
ReadRowsResponse::_Internal::throttle_state(const ReadRowsResponse* msg) {
  return *msg->throttle_state_;
}
const ::google::cloud::bigquery::storage::v1::AvroSchema&
ReadRowsResponse::_Internal::avro_schema(const ReadRowsResponse* msg) {
  return *msg->schema_.avro_schema_;
}
const ::google::cloud::bigquery::storage::v1::ArrowSchema&
ReadRowsResponse::_Internal::arrow_schema(const ReadRowsResponse* msg) {
  return *msg->schema_.arrow_schema_;
}
void ReadRowsResponse::set_allocated_avro_rows(::google::cloud::bigquery::storage::v1::AvroRows* avro_rows) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rows();
  if (avro_rows) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avro_rows)->GetArena();
    if (message_arena != submessage_arena) {
      avro_rows = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avro_rows, submessage_arena);
    }
    set_has_avro_rows();
    rows_.avro_rows_ = avro_rows;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_rows)
}
void ReadRowsResponse::clear_avro_rows() {
  if (_internal_has_avro_rows()) {
    if (GetArena() == nullptr) {
      delete rows_.avro_rows_;
    }
    clear_has_rows();
  }
}
void ReadRowsResponse::set_allocated_arrow_record_batch(::google::cloud::bigquery::storage::v1::ArrowRecordBatch* arrow_record_batch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rows();
  if (arrow_record_batch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arrow_record_batch)->GetArena();
    if (message_arena != submessage_arena) {
      arrow_record_batch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrow_record_batch, submessage_arena);
    }
    set_has_arrow_record_batch();
    rows_.arrow_record_batch_ = arrow_record_batch;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_record_batch)
}
void ReadRowsResponse::clear_arrow_record_batch() {
  if (_internal_has_arrow_record_batch()) {
    if (GetArena() == nullptr) {
      delete rows_.arrow_record_batch_;
    }
    clear_has_rows();
  }
}
void ReadRowsResponse::set_allocated_avro_schema(::google::cloud::bigquery::storage::v1::AvroSchema* avro_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_schema();
  if (avro_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avro_schema)->GetArena();
    if (message_arena != submessage_arena) {
      avro_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avro_schema, submessage_arena);
    }
    set_has_avro_schema();
    schema_.avro_schema_ = avro_schema;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.avro_schema)
}
void ReadRowsResponse::clear_avro_schema() {
  if (_internal_has_avro_schema()) {
    if (GetArena() == nullptr) {
      delete schema_.avro_schema_;
    }
    clear_has_schema();
  }
}
void ReadRowsResponse::set_allocated_arrow_schema(::google::cloud::bigquery::storage::v1::ArrowSchema* arrow_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_schema();
  if (arrow_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arrow_schema)->GetArena();
    if (message_arena != submessage_arena) {
      arrow_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrow_schema, submessage_arena);
    }
    set_has_arrow_schema();
    schema_.arrow_schema_ = arrow_schema;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.ReadRowsResponse.arrow_schema)
}
void ReadRowsResponse::clear_arrow_schema() {
  if (_internal_has_arrow_schema()) {
    if (GetArena() == nullptr) {
      delete schema_.arrow_schema_;
    }
    clear_has_schema();
  }
}
ReadRowsResponse::ReadRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.ReadRowsResponse)
}
ReadRowsResponse::ReadRowsResponse(const ReadRowsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    stats_ = new ::google::cloud::bigquery::storage::v1::StreamStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  if (from._internal_has_throttle_state()) {
    throttle_state_ = new ::google::cloud::bigquery::storage::v1::ThrottleState(*from.throttle_state_);
  } else {
    throttle_state_ = nullptr;
  }
  ::memcpy(&row_count_, &from.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&uncompressed_byte_size_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(uncompressed_byte_size_));
  clear_has_rows();
  switch (from.rows_case()) {
    case kAvroRows: {
      _internal_mutable_avro_rows()->::google::cloud::bigquery::storage::v1::AvroRows::MergeFrom(from._internal_avro_rows());
      break;
    }
    case kArrowRecordBatch: {
      _internal_mutable_arrow_record_batch()->::google::cloud::bigquery::storage::v1::ArrowRecordBatch::MergeFrom(from._internal_arrow_record_batch());
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
  clear_has_schema();
  switch (from.schema_case()) {
    case kAvroSchema: {
      _internal_mutable_avro_schema()->::google::cloud::bigquery::storage::v1::AvroSchema::MergeFrom(from._internal_avro_schema());
      break;
    }
    case kArrowSchema: {
      _internal_mutable_arrow_schema()->::google::cloud::bigquery::storage::v1::ArrowSchema::MergeFrom(from._internal_arrow_schema());
      break;
    }
    case SCHEMA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.ReadRowsResponse)
}

void ReadRowsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncompressed_byte_size_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(uncompressed_byte_size_));
  clear_has_rows();
  clear_has_schema();
}

ReadRowsResponse::~ReadRowsResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRowsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete throttle_state_;
  if (has_rows()) {
    clear_rows();
  }
  if (has_schema()) {
    clear_schema();
  }
}

void ReadRowsResponse::ArenaDtor(void* object) {
  ReadRowsResponse* _this = reinterpret_cast< ReadRowsResponse* >(object);
  (void)_this;
}
void ReadRowsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRowsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRowsResponse& ReadRowsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void ReadRowsResponse::clear_rows() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  switch (rows_case()) {
    case kAvroRows: {
      if (GetArena() == nullptr) {
        delete rows_.avro_rows_;
      }
      break;
    }
    case kArrowRecordBatch: {
      if (GetArena() == nullptr) {
        delete rows_.arrow_record_batch_;
      }
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ROWS_NOT_SET;
}

void ReadRowsResponse::clear_schema() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  switch (schema_case()) {
    case kAvroSchema: {
      if (GetArena() == nullptr) {
        delete schema_.avro_schema_;
      }
      break;
    }
    case kArrowSchema: {
      if (GetArena() == nullptr) {
        delete schema_.arrow_schema_;
      }
      break;
    }
    case SCHEMA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SCHEMA_NOT_SET;
}


void ReadRowsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  if (GetArena() == nullptr && throttle_state_ != nullptr) {
    delete throttle_state_;
  }
  throttle_state_ = nullptr;
  row_count_ = PROTOBUF_LONGLONG(0);
  uncompressed_byte_size_ = PROTOBUF_LONGLONG(0);
  clear_rows();
  clear_schema();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRowsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.cloud.bigquery.storage.v1.StreamStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.AvroRows avro_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_avro_rows(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.ArrowRecordBatch arrow_record_batch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrow_record_batch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.ThrottleState throttle_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 row_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.AvroSchema avro_schema = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_avro_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.ArrowSchema arrow_schema = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrow_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 uncompressed_byte_size = 9 [(.google.api.field_behavior) = OPTIONAL];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_uncompressed_byte_size(&has_bits);
          uncompressed_byte_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRowsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.StreamStats stats = 2;
  if (this->has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stats(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.AvroRows avro_rows = 3;
  if (_internal_has_avro_rows()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::avro_rows(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.ArrowRecordBatch arrow_record_batch = 4;
  if (_internal_has_arrow_record_batch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::arrow_record_batch(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.ThrottleState throttle_state = 5;
  if (this->has_throttle_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::throttle_state(this), target, stream);
  }

  // int64 row_count = 6;
  if (this->row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_row_count(), target);
  }

  // .google.cloud.bigquery.storage.v1.AvroSchema avro_schema = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (_internal_has_avro_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::avro_schema(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.ArrowSchema arrow_schema = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (_internal_has_arrow_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::arrow_schema(this), target, stream);
  }

  // int64 uncompressed_byte_size = 9 [(.google.api.field_behavior) = OPTIONAL];
  if (_internal_has_uncompressed_byte_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_uncompressed_byte_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  return target;
}

size_t ReadRowsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.StreamStats stats = 2;
  if (this->has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  // .google.cloud.bigquery.storage.v1.ThrottleState throttle_state = 5;
  if (this->has_throttle_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *throttle_state_);
  }

  // int64 row_count = 6;
  if (this->row_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_row_count());
  }

  // int64 uncompressed_byte_size = 9 [(.google.api.field_behavior) = OPTIONAL];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uncompressed_byte_size());
  }

  switch (rows_case()) {
    // .google.cloud.bigquery.storage.v1.AvroRows avro_rows = 3;
    case kAvroRows: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rows_.avro_rows_);
      break;
    }
    // .google.cloud.bigquery.storage.v1.ArrowRecordBatch arrow_record_batch = 4;
    case kArrowRecordBatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rows_.arrow_record_batch_);
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
  switch (schema_case()) {
    // .google.cloud.bigquery.storage.v1.AvroSchema avro_schema = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
    case kAvroSchema: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schema_.avro_schema_);
      break;
    }
    // .google.cloud.bigquery.storage.v1.ArrowSchema arrow_schema = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
    case kArrowSchema: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schema_.arrow_schema_);
      break;
    }
    case SCHEMA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRowsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRowsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRowsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.ReadRowsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.ReadRowsResponse)
    MergeFrom(*source);
  }
}

void ReadRowsResponse::MergeFrom(const ReadRowsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stats()) {
    _internal_mutable_stats()->::google::cloud::bigquery::storage::v1::StreamStats::MergeFrom(from._internal_stats());
  }
  if (from.has_throttle_state()) {
    _internal_mutable_throttle_state()->::google::cloud::bigquery::storage::v1::ThrottleState::MergeFrom(from._internal_throttle_state());
  }
  if (from.row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
  if (from._internal_has_uncompressed_byte_size()) {
    _internal_set_uncompressed_byte_size(from._internal_uncompressed_byte_size());
  }
  switch (from.rows_case()) {
    case kAvroRows: {
      _internal_mutable_avro_rows()->::google::cloud::bigquery::storage::v1::AvroRows::MergeFrom(from._internal_avro_rows());
      break;
    }
    case kArrowRecordBatch: {
      _internal_mutable_arrow_record_batch()->::google::cloud::bigquery::storage::v1::ArrowRecordBatch::MergeFrom(from._internal_arrow_record_batch());
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
  switch (from.schema_case()) {
    case kAvroSchema: {
      _internal_mutable_avro_schema()->::google::cloud::bigquery::storage::v1::AvroSchema::MergeFrom(from._internal_avro_schema());
      break;
    }
    case kArrowSchema: {
      _internal_mutable_arrow_schema()->::google::cloud::bigquery::storage::v1::ArrowSchema::MergeFrom(from._internal_arrow_schema());
      break;
    }
    case SCHEMA_NOT_SET: {
      break;
    }
  }
}

void ReadRowsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsResponse::CopyFrom(const ReadRowsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.ReadRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRowsResponse::IsInitialized() const {
  return true;
}

void ReadRowsResponse::InternalSwap(ReadRowsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRowsResponse, uncompressed_byte_size_)
      + sizeof(ReadRowsResponse::uncompressed_byte_size_)
      - PROTOBUF_FIELD_OFFSET(ReadRowsResponse, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
  swap(rows_, other->rows_);
  swap(schema_, other->schema_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRowsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplitReadStreamRequest::InitAsDefaultInstance() {
}
class SplitReadStreamRequest::_Internal {
 public:
};

SplitReadStreamRequest::SplitReadStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
}
SplitReadStreamRequest::SplitReadStreamRequest(const SplitReadStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  fraction_ = from.fraction_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
}

void SplitReadStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fraction_ = 0;
}

SplitReadStreamRequest::~SplitReadStreamRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SplitReadStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SplitReadStreamRequest::ArenaDtor(void* object) {
  SplitReadStreamRequest* _this = reinterpret_cast< SplitReadStreamRequest* >(object);
  (void)_this;
}
void SplitReadStreamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SplitReadStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitReadStreamRequest& SplitReadStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitReadStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void SplitReadStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fraction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitReadStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double fraction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitReadStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.SplitReadStreamRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double fraction = 2;
  if (!(this->fraction() <= 0 && this->fraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_fraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  return target;
}

size_t SplitReadStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double fraction = 2;
  if (!(this->fraction() <= 0 && this->fraction() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitReadStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitReadStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitReadStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
    MergeFrom(*source);
  }
}

void SplitReadStreamRequest::MergeFrom(const SplitReadStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (!(from.fraction() <= 0 && from.fraction() >= 0)) {
    _internal_set_fraction(from._internal_fraction());
  }
}

void SplitReadStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitReadStreamRequest::CopyFrom(const SplitReadStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitReadStreamRequest::IsInitialized() const {
  return true;
}

void SplitReadStreamRequest::InternalSwap(SplitReadStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(fraction_, other->fraction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitReadStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplitReadStreamResponse::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_SplitReadStreamResponse_default_instance_._instance.get_mutable()->primary_stream_ = const_cast< ::google::cloud::bigquery::storage::v1::ReadStream*>(
      ::google::cloud::bigquery::storage::v1::ReadStream::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_SplitReadStreamResponse_default_instance_._instance.get_mutable()->remainder_stream_ = const_cast< ::google::cloud::bigquery::storage::v1::ReadStream*>(
      ::google::cloud::bigquery::storage::v1::ReadStream::internal_default_instance());
}
class SplitReadStreamResponse::_Internal {
 public:
  static const ::google::cloud::bigquery::storage::v1::ReadStream& primary_stream(const SplitReadStreamResponse* msg);
  static const ::google::cloud::bigquery::storage::v1::ReadStream& remainder_stream(const SplitReadStreamResponse* msg);
};

const ::google::cloud::bigquery::storage::v1::ReadStream&
SplitReadStreamResponse::_Internal::primary_stream(const SplitReadStreamResponse* msg) {
  return *msg->primary_stream_;
}
const ::google::cloud::bigquery::storage::v1::ReadStream&
SplitReadStreamResponse::_Internal::remainder_stream(const SplitReadStreamResponse* msg) {
  return *msg->remainder_stream_;
}
void SplitReadStreamResponse::clear_primary_stream() {
  if (GetArena() == nullptr && primary_stream_ != nullptr) {
    delete primary_stream_;
  }
  primary_stream_ = nullptr;
}
void SplitReadStreamResponse::clear_remainder_stream() {
  if (GetArena() == nullptr && remainder_stream_ != nullptr) {
    delete remainder_stream_;
  }
  remainder_stream_ = nullptr;
}
SplitReadStreamResponse::SplitReadStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
}
SplitReadStreamResponse::SplitReadStreamResponse(const SplitReadStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_primary_stream()) {
    primary_stream_ = new ::google::cloud::bigquery::storage::v1::ReadStream(*from.primary_stream_);
  } else {
    primary_stream_ = nullptr;
  }
  if (from._internal_has_remainder_stream()) {
    remainder_stream_ = new ::google::cloud::bigquery::storage::v1::ReadStream(*from.remainder_stream_);
  } else {
    remainder_stream_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
}

void SplitReadStreamResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  ::memset(&primary_stream_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remainder_stream_) -
      reinterpret_cast<char*>(&primary_stream_)) + sizeof(remainder_stream_));
}

SplitReadStreamResponse::~SplitReadStreamResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SplitReadStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete primary_stream_;
  if (this != internal_default_instance()) delete remainder_stream_;
}

void SplitReadStreamResponse::ArenaDtor(void* object) {
  SplitReadStreamResponse* _this = reinterpret_cast< SplitReadStreamResponse* >(object);
  (void)_this;
}
void SplitReadStreamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SplitReadStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitReadStreamResponse& SplitReadStreamResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitReadStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void SplitReadStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && primary_stream_ != nullptr) {
    delete primary_stream_;
  }
  primary_stream_ = nullptr;
  if (GetArena() == nullptr && remainder_stream_ != nullptr) {
    delete remainder_stream_;
  }
  remainder_stream_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitReadStreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.cloud.bigquery.storage.v1.ReadStream primary_stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.ReadStream remainder_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remainder_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitReadStreamResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.ReadStream primary_stream = 1;
  if (this->has_primary_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::primary_stream(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.ReadStream remainder_stream = 2;
  if (this->has_remainder_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::remainder_stream(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  return target;
}

size_t SplitReadStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.ReadStream primary_stream = 1;
  if (this->has_primary_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *primary_stream_);
  }

  // .google.cloud.bigquery.storage.v1.ReadStream remainder_stream = 2;
  if (this->has_remainder_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remainder_stream_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitReadStreamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitReadStreamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitReadStreamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
    MergeFrom(*source);
  }
}

void SplitReadStreamResponse::MergeFrom(const SplitReadStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_primary_stream()) {
    _internal_mutable_primary_stream()->::google::cloud::bigquery::storage::v1::ReadStream::MergeFrom(from._internal_primary_stream());
  }
  if (from.has_remainder_stream()) {
    _internal_mutable_remainder_stream()->::google::cloud::bigquery::storage::v1::ReadStream::MergeFrom(from._internal_remainder_stream());
  }
}

void SplitReadStreamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitReadStreamResponse::CopyFrom(const SplitReadStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.SplitReadStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitReadStreamResponse::IsInitialized() const {
  return true;
}

void SplitReadStreamResponse::InternalSwap(SplitReadStreamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SplitReadStreamResponse, remainder_stream_)
      + sizeof(SplitReadStreamResponse::remainder_stream_)
      - PROTOBUF_FIELD_OFFSET(SplitReadStreamResponse, primary_stream_)>(
          reinterpret_cast<char*>(&primary_stream_),
          reinterpret_cast<char*>(&other->primary_stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitReadStreamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateWriteStreamRequest::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_CreateWriteStreamRequest_default_instance_._instance.get_mutable()->write_stream_ = const_cast< ::google::cloud::bigquery::storage::v1::WriteStream*>(
      ::google::cloud::bigquery::storage::v1::WriteStream::internal_default_instance());
}
class CreateWriteStreamRequest::_Internal {
 public:
  static const ::google::cloud::bigquery::storage::v1::WriteStream& write_stream(const CreateWriteStreamRequest* msg);
};

const ::google::cloud::bigquery::storage::v1::WriteStream&
CreateWriteStreamRequest::_Internal::write_stream(const CreateWriteStreamRequest* msg) {
  return *msg->write_stream_;
}
void CreateWriteStreamRequest::clear_write_stream() {
  if (GetArena() == nullptr && write_stream_ != nullptr) {
    delete write_stream_;
  }
  write_stream_ = nullptr;
}
CreateWriteStreamRequest::CreateWriteStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
}
CreateWriteStreamRequest::CreateWriteStreamRequest(const CreateWriteStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent().empty()) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parent(),
      GetArena());
  }
  if (from._internal_has_write_stream()) {
    write_stream_ = new ::google::cloud::bigquery::storage::v1::WriteStream(*from.write_stream_);
  } else {
    write_stream_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
}

void CreateWriteStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_stream_ = nullptr;
}

CreateWriteStreamRequest::~CreateWriteStreamRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateWriteStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete write_stream_;
}

void CreateWriteStreamRequest::ArenaDtor(void* object) {
  CreateWriteStreamRequest* _this = reinterpret_cast< CreateWriteStreamRequest* >(object);
  (void)_this;
}
void CreateWriteStreamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateWriteStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWriteStreamRequest& CreateWriteStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CreateWriteStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && write_stream_ != nullptr) {
    delete write_stream_;
  }
  write_stream_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateWriteStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.parent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.WriteStream write_stream = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_write_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateWriteStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.CreateWriteStreamRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // .google.cloud.bigquery.storage.v1.WriteStream write_stream = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_write_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::write_stream(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
  return target;
}

size_t CreateWriteStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // .google.cloud.bigquery.storage.v1.WriteStream write_stream = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_write_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *write_stream_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWriteStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWriteStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateWriteStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
    MergeFrom(*source);
  }
}

void CreateWriteStreamRequest::MergeFrom(const CreateWriteStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    _internal_set_parent(from._internal_parent());
  }
  if (from.has_write_stream()) {
    _internal_mutable_write_stream()->::google::cloud::bigquery::storage::v1::WriteStream::MergeFrom(from._internal_write_stream());
  }
}

void CreateWriteStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWriteStreamRequest::CopyFrom(const CreateWriteStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.CreateWriteStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWriteStreamRequest::IsInitialized() const {
  return true;
}

void CreateWriteStreamRequest::InternalSwap(CreateWriteStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(write_stream_, other->write_stream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateWriteStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendRowsRequest_ProtoData::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_AppendRowsRequest_ProtoData_default_instance_._instance.get_mutable()->writer_schema_ = const_cast< ::google::cloud::bigquery::storage::v1::ProtoSchema*>(
      ::google::cloud::bigquery::storage::v1::ProtoSchema::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_AppendRowsRequest_ProtoData_default_instance_._instance.get_mutable()->rows_ = const_cast< ::google::cloud::bigquery::storage::v1::ProtoRows*>(
      ::google::cloud::bigquery::storage::v1::ProtoRows::internal_default_instance());
}
class AppendRowsRequest_ProtoData::_Internal {
 public:
  static const ::google::cloud::bigquery::storage::v1::ProtoSchema& writer_schema(const AppendRowsRequest_ProtoData* msg);
  static const ::google::cloud::bigquery::storage::v1::ProtoRows& rows(const AppendRowsRequest_ProtoData* msg);
};

const ::google::cloud::bigquery::storage::v1::ProtoSchema&
AppendRowsRequest_ProtoData::_Internal::writer_schema(const AppendRowsRequest_ProtoData* msg) {
  return *msg->writer_schema_;
}
const ::google::cloud::bigquery::storage::v1::ProtoRows&
AppendRowsRequest_ProtoData::_Internal::rows(const AppendRowsRequest_ProtoData* msg) {
  return *msg->rows_;
}
void AppendRowsRequest_ProtoData::clear_writer_schema() {
  if (GetArena() == nullptr && writer_schema_ != nullptr) {
    delete writer_schema_;
  }
  writer_schema_ = nullptr;
}
void AppendRowsRequest_ProtoData::clear_rows() {
  if (GetArena() == nullptr && rows_ != nullptr) {
    delete rows_;
  }
  rows_ = nullptr;
}
AppendRowsRequest_ProtoData::AppendRowsRequest_ProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
}
AppendRowsRequest_ProtoData::AppendRowsRequest_ProtoData(const AppendRowsRequest_ProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_writer_schema()) {
    writer_schema_ = new ::google::cloud::bigquery::storage::v1::ProtoSchema(*from.writer_schema_);
  } else {
    writer_schema_ = nullptr;
  }
  if (from._internal_has_rows()) {
    rows_ = new ::google::cloud::bigquery::storage::v1::ProtoRows(*from.rows_);
  } else {
    rows_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
}

void AppendRowsRequest_ProtoData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendRowsRequest_ProtoData_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  ::memset(&writer_schema_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rows_) -
      reinterpret_cast<char*>(&writer_schema_)) + sizeof(rows_));
}

AppendRowsRequest_ProtoData::~AppendRowsRequest_ProtoData() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendRowsRequest_ProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete writer_schema_;
  if (this != internal_default_instance()) delete rows_;
}

void AppendRowsRequest_ProtoData::ArenaDtor(void* object) {
  AppendRowsRequest_ProtoData* _this = reinterpret_cast< AppendRowsRequest_ProtoData* >(object);
  (void)_this;
}
void AppendRowsRequest_ProtoData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendRowsRequest_ProtoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendRowsRequest_ProtoData& AppendRowsRequest_ProtoData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendRowsRequest_ProtoData_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void AppendRowsRequest_ProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && writer_schema_ != nullptr) {
    delete writer_schema_;
  }
  writer_schema_ = nullptr;
  if (GetArena() == nullptr && rows_ != nullptr) {
    delete rows_;
  }
  rows_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendRowsRequest_ProtoData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.cloud.bigquery.storage.v1.ProtoSchema writer_schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_writer_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.ProtoRows rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rows(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendRowsRequest_ProtoData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.ProtoSchema writer_schema = 1;
  if (this->has_writer_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::writer_schema(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.ProtoRows rows = 2;
  if (this->has_rows()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rows(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
  return target;
}

size_t AppendRowsRequest_ProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.ProtoSchema writer_schema = 1;
  if (this->has_writer_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *writer_schema_);
  }

  // .google.cloud.bigquery.storage.v1.ProtoRows rows = 2;
  if (this->has_rows()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rows_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendRowsRequest_ProtoData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendRowsRequest_ProtoData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendRowsRequest_ProtoData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
    MergeFrom(*source);
  }
}

void AppendRowsRequest_ProtoData::MergeFrom(const AppendRowsRequest_ProtoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_writer_schema()) {
    _internal_mutable_writer_schema()->::google::cloud::bigquery::storage::v1::ProtoSchema::MergeFrom(from._internal_writer_schema());
  }
  if (from.has_rows()) {
    _internal_mutable_rows()->::google::cloud::bigquery::storage::v1::ProtoRows::MergeFrom(from._internal_rows());
  }
}

void AppendRowsRequest_ProtoData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendRowsRequest_ProtoData::CopyFrom(const AppendRowsRequest_ProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRowsRequest_ProtoData::IsInitialized() const {
  if (_internal_has_writer_schema()) {
    if (!writer_schema_->IsInitialized()) return false;
  }
  return true;
}

void AppendRowsRequest_ProtoData::InternalSwap(AppendRowsRequest_ProtoData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendRowsRequest_ProtoData, rows_)
      + sizeof(AppendRowsRequest_ProtoData::rows_)
      - PROTOBUF_FIELD_OFFSET(AppendRowsRequest_ProtoData, writer_schema_)>(
          reinterpret_cast<char*>(&writer_schema_),
          reinterpret_cast<char*>(&other->writer_schema_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendRowsRequest_ProtoData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse() {}
AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse::MergeFrom(const AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AppendRowsRequest::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_AppendRowsRequest_default_instance_._instance.get_mutable()->offset_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_AppendRowsRequest_default_instance_.proto_rows_ = const_cast< ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData*>(
      ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData::internal_default_instance());
}
class AppendRowsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int64Value& offset(const AppendRowsRequest* msg);
  static const ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData& proto_rows(const AppendRowsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int64Value&
AppendRowsRequest::_Internal::offset(const AppendRowsRequest* msg) {
  return *msg->offset_;
}
const ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData&
AppendRowsRequest::_Internal::proto_rows(const AppendRowsRequest* msg) {
  return *msg->rows_.proto_rows_;
}
void AppendRowsRequest::clear_offset() {
  if (GetArena() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
}
void AppendRowsRequest::set_allocated_proto_rows(::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* proto_rows) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rows();
  if (proto_rows) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(proto_rows);
    if (message_arena != submessage_arena) {
      proto_rows = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proto_rows, submessage_arena);
    }
    set_has_proto_rows();
    rows_.proto_rows_ = proto_rows;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsRequest.proto_rows)
}
AppendRowsRequest::AppendRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  missing_value_interpretations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.AppendRowsRequest)
}
AppendRowsRequest::AppendRowsRequest(const AppendRowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  missing_value_interpretations_.MergeFrom(from.missing_value_interpretations_);
  write_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_write_stream().empty()) {
    write_stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_write_stream(),
      GetArena());
  }
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trace_id(),
      GetArena());
  }
  if (from._internal_has_offset()) {
    offset_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  default_missing_value_interpretation_ = from.default_missing_value_interpretation_;
  clear_has_rows();
  switch (from.rows_case()) {
    case kProtoRows: {
      _internal_mutable_proto_rows()->::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData::MergeFrom(from._internal_proto_rows());
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.AppendRowsRequest)
}

void AppendRowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  write_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_missing_value_interpretation_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(default_missing_value_interpretation_));
  clear_has_rows();
}

AppendRowsRequest::~AppendRowsRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.AppendRowsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendRowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  write_stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete offset_;
  if (has_rows()) {
    clear_rows();
  }
}

void AppendRowsRequest::ArenaDtor(void* object) {
  AppendRowsRequest* _this = reinterpret_cast< AppendRowsRequest* >(object);
  (void)_this;
}
void AppendRowsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendRowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendRowsRequest& AppendRowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void AppendRowsRequest::clear_rows() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.bigquery.storage.v1.AppendRowsRequest)
  switch (rows_case()) {
    case kProtoRows: {
      if (GetArena() == nullptr) {
        delete rows_.proto_rows_;
      }
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ROWS_NOT_SET;
}


void AppendRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.AppendRowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missing_value_interpretations_.Clear();
  write_stream_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trace_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
  default_missing_value_interpretation_ = 0;
  clear_rows();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendRowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_write_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.AppendRowsRequest.write_stream"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData proto_rows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proto_rows(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trace_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.AppendRowsRequest.trace_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation> missing_value_interpretations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&missing_value_interpretations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation default_missing_value_interpretation = 8 [(.google.api.field_behavior) = OPTIONAL];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_default_missing_value_interpretation(static_cast<::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendRowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.AppendRowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->write_stream().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_write_stream().data(), static_cast<int>(this->_internal_write_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.AppendRowsRequest.write_stream");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_write_stream(), target);
  }

  // .google.protobuf.Int64Value offset = 2;
  if (this->has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::offset(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData proto_rows = 4;
  if (_internal_has_proto_rows()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::proto_rows(this), target, stream);
  }

  // string trace_id = 6;
  if (this->trace_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_id().data(), static_cast<int>(this->_internal_trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.AppendRowsRequest.trace_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_trace_id(), target);
  }

  // map<string, .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation> missing_value_interpretations = 7;
  if (!this->_internal_missing_value_interpretations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretation >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretationsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_missing_value_interpretations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_missing_value_interpretations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretation >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretation >::const_iterator
          it = this->_internal_missing_value_interpretations().begin();
          it != this->_internal_missing_value_interpretations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretation >::const_iterator
          it = this->_internal_missing_value_interpretations().begin();
          it != this->_internal_missing_value_interpretations().end(); ++it) {
        target = AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation default_missing_value_interpretation = 8 [(.google.api.field_behavior) = OPTIONAL];
  if (this->default_missing_value_interpretation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_default_missing_value_interpretation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.AppendRowsRequest)
  return target;
}

size_t AppendRowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.AppendRowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation> missing_value_interpretations = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_missing_value_interpretations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretation >::const_iterator
      it = this->_internal_missing_value_interpretations().begin();
      it != this->_internal_missing_value_interpretations().end(); ++it) {
    total_size += AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->write_stream().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_write_stream());
  }

  // string trace_id = 6;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_id());
  }

  // .google.protobuf.Int64Value offset = 2;
  if (this->has_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_);
  }

  // .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation default_missing_value_interpretation = 8 [(.google.api.field_behavior) = OPTIONAL];
  if (this->default_missing_value_interpretation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_default_missing_value_interpretation());
  }

  switch (rows_case()) {
    // .google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData proto_rows = 4;
    case kProtoRows: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rows_.proto_rows_);
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendRowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.AppendRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendRowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendRowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.AppendRowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.AppendRowsRequest)
    MergeFrom(*source);
  }
}

void AppendRowsRequest::MergeFrom(const AppendRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.AppendRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  missing_value_interpretations_.MergeFrom(from.missing_value_interpretations_);
  if (from.write_stream().size() > 0) {
    _internal_set_write_stream(from._internal_write_stream());
  }
  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.has_offset()) {
    _internal_mutable_offset()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_offset());
  }
  if (from.default_missing_value_interpretation() != 0) {
    _internal_set_default_missing_value_interpretation(from._internal_default_missing_value_interpretation());
  }
  switch (from.rows_case()) {
    case kProtoRows: {
      _internal_mutable_proto_rows()->::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData::MergeFrom(from._internal_proto_rows());
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
}

void AppendRowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.AppendRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendRowsRequest::CopyFrom(const AppendRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.AppendRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRowsRequest::IsInitialized() const {
  switch (rows_case()) {
    case kProtoRows: {
      if (has_proto_rows()) {
        if (!this->proto_rows().IsInitialized()) return false;
      }
      break;
    }
    case ROWS_NOT_SET: {
      break;
    }
  }
  return true;
}

void AppendRowsRequest::InternalSwap(AppendRowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  missing_value_interpretations_.Swap(&other->missing_value_interpretations_);
  write_stream_.Swap(&other->write_stream_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendRowsRequest, default_missing_value_interpretation_)
      + sizeof(AppendRowsRequest::default_missing_value_interpretation_)
      - PROTOBUF_FIELD_OFFSET(AppendRowsRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
  swap(rows_, other->rows_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendRowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendRowsResponse_AppendResult::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_AppendRowsResponse_AppendResult_default_instance_._instance.get_mutable()->offset_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
}
class AppendRowsResponse_AppendResult::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int64Value& offset(const AppendRowsResponse_AppendResult* msg);
};

const PROTOBUF_NAMESPACE_ID::Int64Value&
AppendRowsResponse_AppendResult::_Internal::offset(const AppendRowsResponse_AppendResult* msg) {
  return *msg->offset_;
}
void AppendRowsResponse_AppendResult::clear_offset() {
  if (GetArena() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
}
AppendRowsResponse_AppendResult::AppendRowsResponse_AppendResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
}
AppendRowsResponse_AppendResult::AppendRowsResponse_AppendResult(const AppendRowsResponse_AppendResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offset()) {
    offset_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
}

void AppendRowsResponse_AppendResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendRowsResponse_AppendResult_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  offset_ = nullptr;
}

AppendRowsResponse_AppendResult::~AppendRowsResponse_AppendResult() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendRowsResponse_AppendResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete offset_;
}

void AppendRowsResponse_AppendResult::ArenaDtor(void* object) {
  AppendRowsResponse_AppendResult* _this = reinterpret_cast< AppendRowsResponse_AppendResult* >(object);
  (void)_this;
}
void AppendRowsResponse_AppendResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendRowsResponse_AppendResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendRowsResponse_AppendResult& AppendRowsResponse_AppendResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendRowsResponse_AppendResult_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void AppendRowsResponse_AppendResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendRowsResponse_AppendResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Int64Value offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendRowsResponse_AppendResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value offset = 1;
  if (this->has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
  return target;
}

size_t AppendRowsResponse_AppendResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int64Value offset = 1;
  if (this->has_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendRowsResponse_AppendResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendRowsResponse_AppendResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendRowsResponse_AppendResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
    MergeFrom(*source);
  }
}

void AppendRowsResponse_AppendResult::MergeFrom(const AppendRowsResponse_AppendResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offset()) {
    _internal_mutable_offset()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_offset());
  }
}

void AppendRowsResponse_AppendResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendRowsResponse_AppendResult::CopyFrom(const AppendRowsResponse_AppendResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRowsResponse_AppendResult::IsInitialized() const {
  return true;
}

void AppendRowsResponse_AppendResult::InternalSwap(AppendRowsResponse_AppendResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendRowsResponse_AppendResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendRowsResponse::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_AppendRowsResponse_default_instance_.append_result_ = const_cast< ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult*>(
      ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_AppendRowsResponse_default_instance_.error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  ::google::cloud::bigquery::storage::v1::_AppendRowsResponse_default_instance_._instance.get_mutable()->updated_schema_ = const_cast< ::google::cloud::bigquery::storage::v1::TableSchema*>(
      ::google::cloud::bigquery::storage::v1::TableSchema::internal_default_instance());
}
class AppendRowsResponse::_Internal {
 public:
  static const ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult& append_result(const AppendRowsResponse* msg);
  static const ::google::rpc::Status& error(const AppendRowsResponse* msg);
  static const ::google::cloud::bigquery::storage::v1::TableSchema& updated_schema(const AppendRowsResponse* msg);
};

const ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult&
AppendRowsResponse::_Internal::append_result(const AppendRowsResponse* msg) {
  return *msg->response_.append_result_;
}
const ::google::rpc::Status&
AppendRowsResponse::_Internal::error(const AppendRowsResponse* msg) {
  return *msg->response_.error_;
}
const ::google::cloud::bigquery::storage::v1::TableSchema&
AppendRowsResponse::_Internal::updated_schema(const AppendRowsResponse* msg) {
  return *msg->updated_schema_;
}
void AppendRowsResponse::set_allocated_append_result(::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* append_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (append_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(append_result);
    if (message_arena != submessage_arena) {
      append_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, append_result, submessage_arena);
    }
    set_has_append_result();
    response_.append_result_ = append_result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsResponse.append_result)
}
void AppendRowsResponse::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.storage.v1.AppendRowsResponse.error)
}
void AppendRowsResponse::clear_error() {
  if (_internal_has_error()) {
    if (GetArena() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
void AppendRowsResponse::clear_updated_schema() {
  if (GetArena() == nullptr && updated_schema_ != nullptr) {
    delete updated_schema_;
  }
  updated_schema_ = nullptr;
}
AppendRowsResponse::AppendRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  row_errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.AppendRowsResponse)
}
AppendRowsResponse::AppendRowsResponse(const AppendRowsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      row_errors_(from.row_errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  write_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_write_stream().empty()) {
    write_stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_write_stream(),
      GetArena());
  }
  if (from._internal_has_updated_schema()) {
    updated_schema_ = new ::google::cloud::bigquery::storage::v1::TableSchema(*from.updated_schema_);
  } else {
    updated_schema_ = nullptr;
  }
  clear_has_response();
  switch (from.response_case()) {
    case kAppendResult: {
      _internal_mutable_append_result()->::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult::MergeFrom(from._internal_append_result());
      break;
    }
    case kError: {
      _internal_mutable_error()->::google::rpc::Status::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.AppendRowsResponse)
}

void AppendRowsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  write_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updated_schema_ = nullptr;
  clear_has_response();
}

AppendRowsResponse::~AppendRowsResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.AppendRowsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendRowsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  write_stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete updated_schema_;
  if (has_response()) {
    clear_response();
  }
}

void AppendRowsResponse::ArenaDtor(void* object) {
  AppendRowsResponse* _this = reinterpret_cast< AppendRowsResponse* >(object);
  (void)_this;
}
void AppendRowsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendRowsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendRowsResponse& AppendRowsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void AppendRowsResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.bigquery.storage.v1.AppendRowsResponse)
  switch (response_case()) {
    case kAppendResult: {
      if (GetArena() == nullptr) {
        delete response_.append_result_;
      }
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void AppendRowsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.AppendRowsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_errors_.Clear();
  write_stream_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && updated_schema_ != nullptr) {
    delete updated_schema_;
  }
  updated_schema_ = nullptr;
  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendRowsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult append_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_append_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.rpc.Status error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.TableSchema updated_schema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.bigquery.storage.v1.RowError row_errors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string write_stream = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_write_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.AppendRowsResponse.write_stream"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendRowsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.AppendRowsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult append_result = 1;
  if (_internal_has_append_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::append_result(this), target, stream);
  }

  // .google.rpc.Status error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .google.cloud.bigquery.storage.v1.TableSchema updated_schema = 3;
  if (this->has_updated_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updated_schema(this), target, stream);
  }

  // repeated .google.cloud.bigquery.storage.v1.RowError row_errors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_row_errors(i), target, stream);
  }

  // string write_stream = 5;
  if (this->write_stream().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_write_stream().data(), static_cast<int>(this->_internal_write_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.AppendRowsResponse.write_stream");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_write_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.AppendRowsResponse)
  return target;
}

size_t AppendRowsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.AppendRowsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.bigquery.storage.v1.RowError row_errors = 4;
  total_size += 1UL * this->_internal_row_errors_size();
  for (const auto& msg : this->row_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string write_stream = 5;
  if (this->write_stream().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_write_stream());
  }

  // .google.cloud.bigquery.storage.v1.TableSchema updated_schema = 3;
  if (this->has_updated_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_schema_);
  }

  switch (response_case()) {
    // .google.cloud.bigquery.storage.v1.AppendRowsResponse.AppendResult append_result = 1;
    case kAppendResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.append_result_);
      break;
    }
    // .google.rpc.Status error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendRowsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.AppendRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendRowsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendRowsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.AppendRowsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.AppendRowsResponse)
    MergeFrom(*source);
  }
}

void AppendRowsResponse::MergeFrom(const AppendRowsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.AppendRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_errors_.MergeFrom(from.row_errors_);
  if (from.write_stream().size() > 0) {
    _internal_set_write_stream(from._internal_write_stream());
  }
  if (from.has_updated_schema()) {
    _internal_mutable_updated_schema()->::google::cloud::bigquery::storage::v1::TableSchema::MergeFrom(from._internal_updated_schema());
  }
  switch (from.response_case()) {
    case kAppendResult: {
      _internal_mutable_append_result()->::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult::MergeFrom(from._internal_append_result());
      break;
    }
    case kError: {
      _internal_mutable_error()->::google::rpc::Status::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void AppendRowsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.AppendRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendRowsResponse::CopyFrom(const AppendRowsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.AppendRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRowsResponse::IsInitialized() const {
  return true;
}

void AppendRowsResponse::InternalSwap(AppendRowsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  row_errors_.InternalSwap(&other->row_errors_);
  write_stream_.Swap(&other->write_stream_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(updated_schema_, other->updated_schema_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendRowsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetWriteStreamRequest::InitAsDefaultInstance() {
}
class GetWriteStreamRequest::_Internal {
 public:
};

GetWriteStreamRequest::GetWriteStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
}
GetWriteStreamRequest::GetWriteStreamRequest(const GetWriteStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  view_ = from.view_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
}

void GetWriteStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_ = 0;
}

GetWriteStreamRequest::~GetWriteStreamRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetWriteStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetWriteStreamRequest::ArenaDtor(void* object) {
  GetWriteStreamRequest* _this = reinterpret_cast< GetWriteStreamRequest* >(object);
  (void)_this;
}
void GetWriteStreamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWriteStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWriteStreamRequest& GetWriteStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void GetWriteStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  view_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWriteStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.GetWriteStreamRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.WriteStreamView view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_view(static_cast<::google::cloud::bigquery::storage::v1::WriteStreamView>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWriteStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.GetWriteStreamRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.cloud.bigquery.storage.v1.WriteStreamView view = 3;
  if (this->view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
  return target;
}

size_t GetWriteStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.cloud.bigquery.storage.v1.WriteStreamView view = 3;
  if (this->view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_view());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWriteStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWriteStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWriteStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
    MergeFrom(*source);
  }
}

void GetWriteStreamRequest::MergeFrom(const GetWriteStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.view() != 0) {
    _internal_set_view(from._internal_view());
  }
}

void GetWriteStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWriteStreamRequest::CopyFrom(const GetWriteStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.GetWriteStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteStreamRequest::IsInitialized() const {
  return true;
}

void GetWriteStreamRequest::InternalSwap(GetWriteStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(view_, other->view_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWriteStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchCommitWriteStreamsRequest::InitAsDefaultInstance() {
}
class BatchCommitWriteStreamsRequest::_Internal {
 public:
};

BatchCommitWriteStreamsRequest::BatchCommitWriteStreamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  write_streams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
}
BatchCommitWriteStreamsRequest::BatchCommitWriteStreamsRequest(const BatchCommitWriteStreamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      write_streams_(from.write_streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent().empty()) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parent(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
}

void BatchCommitWriteStreamsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchCommitWriteStreamsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BatchCommitWriteStreamsRequest::~BatchCommitWriteStreamsRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchCommitWriteStreamsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BatchCommitWriteStreamsRequest::ArenaDtor(void* object) {
  BatchCommitWriteStreamsRequest* _this = reinterpret_cast< BatchCommitWriteStreamsRequest* >(object);
  (void)_this;
}
void BatchCommitWriteStreamsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchCommitWriteStreamsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchCommitWriteStreamsRequest& BatchCommitWriteStreamsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchCommitWriteStreamsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void BatchCommitWriteStreamsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_streams_.Clear();
  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchCommitWriteStreamsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.parent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string write_streams = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_write_streams();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchCommitWriteStreamsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // repeated string write_streams = 2 [(.google.api.field_behavior) = REQUIRED];
  for (int i = 0, n = this->_internal_write_streams_size(); i < n; i++) {
    const auto& s = this->_internal_write_streams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest.write_streams");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
  return target;
}

size_t BatchCommitWriteStreamsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string write_streams = 2 [(.google.api.field_behavior) = REQUIRED];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(write_streams_.size());
  for (int i = 0, n = write_streams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      write_streams_.Get(i));
  }

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchCommitWriteStreamsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchCommitWriteStreamsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchCommitWriteStreamsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
    MergeFrom(*source);
  }
}

void BatchCommitWriteStreamsRequest::MergeFrom(const BatchCommitWriteStreamsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  write_streams_.MergeFrom(from.write_streams_);
  if (from.parent().size() > 0) {
    _internal_set_parent(from._internal_parent());
  }
}

void BatchCommitWriteStreamsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchCommitWriteStreamsRequest::CopyFrom(const BatchCommitWriteStreamsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCommitWriteStreamsRequest::IsInitialized() const {
  return true;
}

void BatchCommitWriteStreamsRequest::InternalSwap(BatchCommitWriteStreamsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  write_streams_.InternalSwap(&other->write_streams_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchCommitWriteStreamsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchCommitWriteStreamsResponse::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_BatchCommitWriteStreamsResponse_default_instance_._instance.get_mutable()->commit_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class BatchCommitWriteStreamsResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& commit_time(const BatchCommitWriteStreamsResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
BatchCommitWriteStreamsResponse::_Internal::commit_time(const BatchCommitWriteStreamsResponse* msg) {
  return *msg->commit_time_;
}
void BatchCommitWriteStreamsResponse::clear_commit_time() {
  if (GetArena() == nullptr && commit_time_ != nullptr) {
    delete commit_time_;
  }
  commit_time_ = nullptr;
}
BatchCommitWriteStreamsResponse::BatchCommitWriteStreamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stream_errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
}
BatchCommitWriteStreamsResponse::BatchCommitWriteStreamsResponse(const BatchCommitWriteStreamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stream_errors_(from.stream_errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commit_time()) {
    commit_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.commit_time_);
  } else {
    commit_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
}

void BatchCommitWriteStreamsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchCommitWriteStreamsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  commit_time_ = nullptr;
}

BatchCommitWriteStreamsResponse::~BatchCommitWriteStreamsResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchCommitWriteStreamsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commit_time_;
}

void BatchCommitWriteStreamsResponse::ArenaDtor(void* object) {
  BatchCommitWriteStreamsResponse* _this = reinterpret_cast< BatchCommitWriteStreamsResponse* >(object);
  (void)_this;
}
void BatchCommitWriteStreamsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchCommitWriteStreamsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchCommitWriteStreamsResponse& BatchCommitWriteStreamsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchCommitWriteStreamsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void BatchCommitWriteStreamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_errors_.Clear();
  if (GetArena() == nullptr && commit_time_ != nullptr) {
    delete commit_time_;
  }
  commit_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchCommitWriteStreamsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp commit_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.bigquery.storage.v1.StorageError stream_errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchCommitWriteStreamsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp commit_time = 1;
  if (this->has_commit_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commit_time(this), target, stream);
  }

  // repeated .google.cloud.bigquery.storage.v1.StorageError stream_errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stream_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stream_errors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
  return target;
}

size_t BatchCommitWriteStreamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.bigquery.storage.v1.StorageError stream_errors = 2;
  total_size += 1UL * this->_internal_stream_errors_size();
  for (const auto& msg : this->stream_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp commit_time = 1;
  if (this->has_commit_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commit_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchCommitWriteStreamsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchCommitWriteStreamsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchCommitWriteStreamsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
    MergeFrom(*source);
  }
}

void BatchCommitWriteStreamsResponse::MergeFrom(const BatchCommitWriteStreamsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_errors_.MergeFrom(from.stream_errors_);
  if (from.has_commit_time()) {
    _internal_mutable_commit_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_commit_time());
  }
}

void BatchCommitWriteStreamsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchCommitWriteStreamsResponse::CopyFrom(const BatchCommitWriteStreamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.BatchCommitWriteStreamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCommitWriteStreamsResponse::IsInitialized() const {
  return true;
}

void BatchCommitWriteStreamsResponse::InternalSwap(BatchCommitWriteStreamsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stream_errors_.InternalSwap(&other->stream_errors_);
  swap(commit_time_, other->commit_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchCommitWriteStreamsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FinalizeWriteStreamRequest::InitAsDefaultInstance() {
}
class FinalizeWriteStreamRequest::_Internal {
 public:
};

FinalizeWriteStreamRequest::FinalizeWriteStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
}
FinalizeWriteStreamRequest::FinalizeWriteStreamRequest(const FinalizeWriteStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
}

void FinalizeWriteStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FinalizeWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FinalizeWriteStreamRequest::~FinalizeWriteStreamRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FinalizeWriteStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FinalizeWriteStreamRequest::ArenaDtor(void* object) {
  FinalizeWriteStreamRequest* _this = reinterpret_cast< FinalizeWriteStreamRequest* >(object);
  (void)_this;
}
void FinalizeWriteStreamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinalizeWriteStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinalizeWriteStreamRequest& FinalizeWriteStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinalizeWriteStreamRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void FinalizeWriteStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinalizeWriteStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinalizeWriteStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
  return target;
}

size_t FinalizeWriteStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinalizeWriteStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FinalizeWriteStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinalizeWriteStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
    MergeFrom(*source);
  }
}

void FinalizeWriteStreamRequest::MergeFrom(const FinalizeWriteStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void FinalizeWriteStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalizeWriteStreamRequest::CopyFrom(const FinalizeWriteStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalizeWriteStreamRequest::IsInitialized() const {
  return true;
}

void FinalizeWriteStreamRequest::InternalSwap(FinalizeWriteStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FinalizeWriteStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FinalizeWriteStreamResponse::InitAsDefaultInstance() {
}
class FinalizeWriteStreamResponse::_Internal {
 public:
};

FinalizeWriteStreamResponse::FinalizeWriteStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
}
FinalizeWriteStreamResponse::FinalizeWriteStreamResponse(const FinalizeWriteStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  row_count_ = from.row_count_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
}

void FinalizeWriteStreamResponse::SharedCtor() {
  row_count_ = PROTOBUF_LONGLONG(0);
}

FinalizeWriteStreamResponse::~FinalizeWriteStreamResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FinalizeWriteStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FinalizeWriteStreamResponse::ArenaDtor(void* object) {
  FinalizeWriteStreamResponse* _this = reinterpret_cast< FinalizeWriteStreamResponse* >(object);
  (void)_this;
}
void FinalizeWriteStreamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinalizeWriteStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinalizeWriteStreamResponse& FinalizeWriteStreamResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinalizeWriteStreamResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void FinalizeWriteStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinalizeWriteStreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 row_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinalizeWriteStreamResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 row_count = 1;
  if (this->row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_row_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
  return target;
}

size_t FinalizeWriteStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 row_count = 1;
  if (this->row_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_row_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinalizeWriteStreamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FinalizeWriteStreamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinalizeWriteStreamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
    MergeFrom(*source);
  }
}

void FinalizeWriteStreamResponse::MergeFrom(const FinalizeWriteStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
}

void FinalizeWriteStreamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalizeWriteStreamResponse::CopyFrom(const FinalizeWriteStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.FinalizeWriteStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalizeWriteStreamResponse::IsInitialized() const {
  return true;
}

void FinalizeWriteStreamResponse::InternalSwap(FinalizeWriteStreamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(row_count_, other->row_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinalizeWriteStreamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushRowsRequest::InitAsDefaultInstance() {
  ::google::cloud::bigquery::storage::v1::_FlushRowsRequest_default_instance_._instance.get_mutable()->offset_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
}
class FlushRowsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int64Value& offset(const FlushRowsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Int64Value&
FlushRowsRequest::_Internal::offset(const FlushRowsRequest* msg) {
  return *msg->offset_;
}
void FlushRowsRequest::clear_offset() {
  if (GetArena() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
}
FlushRowsRequest::FlushRowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.FlushRowsRequest)
}
FlushRowsRequest::FlushRowsRequest(const FlushRowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  write_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_write_stream().empty()) {
    write_stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_write_stream(),
      GetArena());
  }
  if (from._internal_has_offset()) {
    offset_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.FlushRowsRequest)
}

void FlushRowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  write_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_ = nullptr;
}

FlushRowsRequest::~FlushRowsRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.FlushRowsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlushRowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  write_stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete offset_;
}

void FlushRowsRequest::ArenaDtor(void* object) {
  FlushRowsRequest* _this = reinterpret_cast< FlushRowsRequest* >(object);
  (void)_this;
}
void FlushRowsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushRowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushRowsRequest& FlushRowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushRowsRequest_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void FlushRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.FlushRowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_stream_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushRowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_write_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.FlushRowsRequest.write_stream"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushRowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.FlushRowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->write_stream().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_write_stream().data(), static_cast<int>(this->_internal_write_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.FlushRowsRequest.write_stream");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_write_stream(), target);
  }

  // .google.protobuf.Int64Value offset = 2;
  if (this->has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::offset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.FlushRowsRequest)
  return target;
}

size_t FlushRowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.FlushRowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->write_stream().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_write_stream());
  }

  // .google.protobuf.Int64Value offset = 2;
  if (this->has_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushRowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.FlushRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushRowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushRowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.FlushRowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.FlushRowsRequest)
    MergeFrom(*source);
  }
}

void FlushRowsRequest::MergeFrom(const FlushRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.FlushRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.write_stream().size() > 0) {
    _internal_set_write_stream(from._internal_write_stream());
  }
  if (from.has_offset()) {
    _internal_mutable_offset()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_offset());
  }
}

void FlushRowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.FlushRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushRowsRequest::CopyFrom(const FlushRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.FlushRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRowsRequest::IsInitialized() const {
  return true;
}

void FlushRowsRequest::InternalSwap(FlushRowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  write_stream_.Swap(&other->write_stream_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushRowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushRowsResponse::InitAsDefaultInstance() {
}
class FlushRowsResponse::_Internal {
 public:
};

FlushRowsResponse::FlushRowsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.FlushRowsResponse)
}
FlushRowsResponse::FlushRowsResponse(const FlushRowsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.FlushRowsResponse)
}

void FlushRowsResponse::SharedCtor() {
  offset_ = PROTOBUF_LONGLONG(0);
}

FlushRowsResponse::~FlushRowsResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.FlushRowsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlushRowsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlushRowsResponse::ArenaDtor(void* object) {
  FlushRowsResponse* _this = reinterpret_cast< FlushRowsResponse* >(object);
  (void)_this;
}
void FlushRowsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushRowsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushRowsResponse& FlushRowsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushRowsResponse_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void FlushRowsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.FlushRowsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushRowsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushRowsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.FlushRowsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.FlushRowsResponse)
  return target;
}

size_t FlushRowsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.FlushRowsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushRowsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.FlushRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushRowsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushRowsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.FlushRowsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.FlushRowsResponse)
    MergeFrom(*source);
  }
}

void FlushRowsResponse::MergeFrom(const FlushRowsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.FlushRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void FlushRowsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.FlushRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushRowsResponse::CopyFrom(const FlushRowsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.FlushRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRowsResponse::IsInitialized() const {
  return true;
}

void FlushRowsResponse::InternalSwap(FlushRowsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushRowsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StorageError::InitAsDefaultInstance() {
}
class StorageError::_Internal {
 public:
};

StorageError::StorageError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.StorageError)
}
StorageError::StorageError(const StorageError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity().empty()) {
    entity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entity(),
      GetArena());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_message(),
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.StorageError)
}

void StorageError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

StorageError::~StorageError() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.StorageError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StorageError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StorageError::ArenaDtor(void* object) {
  StorageError* _this = reinterpret_cast< StorageError* >(object);
  (void)_this;
}
void StorageError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorageError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageError& StorageError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void StorageError::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.StorageError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.cloud.bigquery.storage.v1.StorageError.StorageErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::google::cloud::bigquery::storage::v1::StorageError_StorageErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_entity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.StorageError.entity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.StorageError.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.StorageError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.storage.v1.StorageError.StorageErrorCode code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string entity = 2;
  if (this->entity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity().data(), static_cast<int>(this->_internal_entity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.StorageError.entity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entity(), target);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.StorageError.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.StorageError)
  return target;
}

size_t StorageError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.StorageError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity = 2;
  if (this->entity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity());
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .google.cloud.bigquery.storage.v1.StorageError.StorageErrorCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.StorageError)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.StorageError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.StorageError)
    MergeFrom(*source);
  }
}

void StorageError::MergeFrom(const StorageError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.StorageError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity().size() > 0) {
    _internal_set_entity(from._internal_entity());
  }
  if (from.error_message().size() > 0) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void StorageError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.StorageError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageError::CopyFrom(const StorageError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.StorageError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageError::IsInitialized() const {
  return true;
}

void StorageError::InternalSwap(StorageError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entity_.Swap(&other->entity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RowError::InitAsDefaultInstance() {
}
class RowError::_Internal {
 public:
};

RowError::RowError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.bigquery.storage.v1.RowError)
}
RowError::RowError(const RowError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&index_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.storage.v1.RowError)
}

void RowError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RowError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&index_)) + sizeof(code_));
}

RowError::~RowError() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.storage.v1.RowError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RowError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RowError::ArenaDtor(void* object) {
  RowError* _this = reinterpret_cast< RowError* >(object);
  (void)_this;
}
void RowError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RowError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RowError& RowError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RowError_google_2fcloud_2fbigquery_2fstorage_2fv1_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void RowError::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.storage.v1.RowError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&index_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RowError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.bigquery.storage.v1.RowError.RowErrorCode code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::google::cloud::bigquery::storage::v1::RowError_RowErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.bigquery.storage.v1.RowError.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RowError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.storage.v1.RowError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_index(), target);
  }

  // .google.cloud.bigquery.storage.v1.RowError.RowErrorCode code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_code(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.storage.v1.RowError.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.storage.v1.RowError)
  return target;
}

size_t RowError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.storage.v1.RowError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_index());
  }

  // .google.cloud.bigquery.storage.v1.RowError.RowErrorCode code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RowError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.storage.v1.RowError)
  GOOGLE_DCHECK_NE(&from, this);
  const RowError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RowError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.storage.v1.RowError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.storage.v1.RowError)
    MergeFrom(*source);
  }
}

void RowError::MergeFrom(const RowError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.storage.v1.RowError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void RowError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.storage.v1.RowError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowError::CopyFrom(const RowError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.storage.v1.RowError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowError::IsInitialized() const {
  return true;
}

void RowError::InternalSwap(RowError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RowError, code_)
      + sizeof(RowError::code_)
      - PROTOBUF_FIELD_OFFSET(RowError, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RowError::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace storage
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::CreateReadSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::ReadRowsRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::ReadRowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::ReadRowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::ThrottleState* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::ThrottleState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::ThrottleState >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::StreamStats_Progress* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::StreamStats_Progress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::StreamStats_Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::StreamStats* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::StreamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::StreamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::ReadRowsResponse* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::ReadRowsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::ReadRowsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::SplitReadStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::SplitReadStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::CreateWriteStreamRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::CreateWriteStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::CreateWriteStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::AppendRowsRequest_ProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::AppendRowsRequest_MissingValueInterpretationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::AppendRowsRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AppendRowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::AppendRowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::AppendRowsResponse_AppendResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::AppendRowsResponse* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::AppendRowsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::AppendRowsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::GetWriteStreamRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::GetWriteStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::GetWriteStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsResponse* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::BatchCommitWriteStreamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamResponse* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::FinalizeWriteStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::FlushRowsRequest* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::FlushRowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::FlushRowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::FlushRowsResponse* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::FlushRowsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::FlushRowsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::StorageError* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::StorageError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::StorageError >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::bigquery::storage::v1::RowError* Arena::CreateMaybeMessage< ::google::cloud::bigquery::storage::v1::RowError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::bigquery::storage::v1::RowError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
